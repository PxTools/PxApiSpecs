openapi: 3.0.3
info:
  title: PxApi
  version: '1.0'
  description: "This api is part of the PX-family.\r\n Q: Should the tables and the navigate endpoint have different backends(Lucene vs sql)?"
paths:
  /configinfo:
    get:
      tags:
        - ConfigInfo
      operationId: GetConfigInfo
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseConfigInfo'
  /topictree:
    get:
      tags:
        - topictree
      summary: "This has an include part, in stead of nested elements. \r\n The menutree starts here. Gets the MenuItem at the root node"
      operationId: GetNavigateAlt2Root
      parameters:
        - $ref: '#/components/parameters/levelsParam'
        - $ref: '#/components/parameters/langParam'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseMenuItem'
        '429':
          $ref: '#/components/responses/ErrorResponse429'
  /topictree/{id}:
    get:
      tags:
        - topictree
      summary: Gets the MenuItem for the node with the given id.
      operationId: GetNavigateAlt2
      parameters:
        - $ref: '#/components/parameters/levelsParam'
        - $ref: '#/components/parameters/menuIdParam'
        - $ref: '#/components/parameters/langParam'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseMenuItem'
  /tables:
    get:
      tags:
        - Tables
      summary: Paginated. List of "table-locators" from all sources.  Lucene is backend(?). On/off param for depricated tables. Query parameter.
      operationId: search
      parameters:
        - $ref: '#/components/parameters/langParam'
        - name: searchText
          in: query
          description: ''
          schema:
            type: string
            default: title:uf√∏retryg*
        - name: skipDepricated
          in: query
          description: Set this to true if you dont want depricated(discontinued) tables.
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseSearchResultItemArrayPaginated'
        '429':
          $ref: '#/components/responses/ErrorResponse429'
  /tables/pastdays:
    get:
      tags:
        - Tables
      summary: Or is it cleaner to keep in "after the ?"  This way shows the possibillity clearer in swagger, but thats just one tool...
      operationId: search2Id
      parameters:
        - $ref: '#/components/parameters/langParam'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseToDo'
        '429':
          $ref: '#/components/responses/ErrorResponse429'
  /tables/{id}:
    get:
      tags:
        - Tables
      summary: Perhaps not much use for this, but should be here for consistency. Just give the linke tables/{id}/* endpoints
      operationId: tablesId
      parameters:
        - $ref: '#/components/parameters/tableIdParam'
        - $ref: '#/components/parameters/langParam'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseTableLocator'
        '429':
          $ref: '#/components/responses/ErrorResponse429'
  /tables/{id}/metadata:
    get:
      tags:
        - Tables
      summary: Gets metadata for table.
      operationId: GetTableM
      parameters:
        - $ref: '#/components/parameters/tableIdParam'
        - $ref: '#/components/parameters/langParam'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseToDo'
  /tables/{id}/data:
    get:
      tags:
        - Tables
      summary: Gets data for table
      operationId: GetTableD
      parameters:
        - $ref: '#/components/parameters/tableIdParam'
        - $ref: '#/components/parameters/langParam'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseToDo'
  /tables/{id}/filters:
    get:
      tags:
        - Tables
      summary: "Gets list of filters for table\r\n Q1: Should this be Paginated? \r\n Q2: The term Filters, will this lead to search-filter confusion? Could we use another name, cube-filter?"
      operationId: GetTableF
      parameters:
        - $ref: '#/components/parameters/tableIdParam'
        - $ref: '#/components/parameters/langParam'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseToDo'
  /tables/{id}/filters/{filterId}:
    get:
      tags:
        - Tables
      summary: Gets a filter for table. (  ? )
      operationId: GetTableFid
      parameters:
        - $ref: '#/components/parameters/tableIdParam'
        - $ref: '#/components/parameters/langParam'
        - name: filterId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseToDo'
components:
  parameters:
    langParam:
      name: lang
      in: query
      description: The language if the default is not what you want.
      required: false
      schema:
        type: string
      examples:
        X1:
          value: en
          summary: For english
        X2:
          value: dk
          summary: For danish
    tableIdParam:
      name: id
      in: path
      description: If this is an endpoint of a \"Portal site\", how will we know if the \"real\" metadata is at /nav/api/tables/{id}/metadata or at /ssb/api/tables/{id}/metadata ?\r\nShould these ids have an internal structure like ssb:17?  And local:22 where local is magic and means go to PX/CNMM-database.  Or put it \"behind the ?\", but that separates the twins :-)
      required: true
      schema:
        type: string
    menuIdParam:
      name: id
      in: path
      description: The menu-id of the desired node
      required: true
      schema:
        type: string
    levelsParam:
      name: levels
      in: query
      description: Number of levels that are fetched in the response. Minimun 0, which will fetch all levels in the menutree.
      schema:
        type: integer
        format: int32
        default: 1
        minimum: 0
  schemas:
    BaseResponse:
      type: object
      description: Common properties for all responses. Abstract class.
      properties:
        error:
          type: string
          description: Errors will come here
          nullable: true
        info:
          type: string
          description: Messages on planed maintainence willl come here.
          nullable: true
      example:
        error: The id cant be found
        info: Closed on mondays
    ResponseConfigInfo:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              $ref: '#/components/schemas/ConfigInfo'
      description: This holds information about the config of the api.
    ResponseMenuItem:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              $ref: '#/components/schemas/BaseMenuItem'
      description: This holds information about the menutree of the api.
      example:
        data:
          id: ''
          menuItemType: folder
          label: null
          sortOrder: 42
          links: null
          folderContent:
            - id: al
              menuItemType: folder
              label: Folder 1
              sortOrder: 43
              links:
                - rel: included_data
                  href: '#/included/al'
            - id: AKUAarNY
              menuItemType: table
              label: '05111: Table in root folder'
              sortOrder: 44
              links:
                - rel: tables
                  href: https://my-site.com/api/v2/tables/AKUAarNY
          included:
            - id: al
              menuItemType: folder
              label: Folder 1
              sortOrder: 43
              links: null
              folderContent:
                - id: al_al03
                  menuItemType: closed-folder
                  label: Folder 1 1
                  sortOrder: 45
                  links:
                    - rel: data
                      href: https://localhost:7067/navigate/treealt2/al_al03
                - id: ForstgenArbNye
                  menuItemType: table
                  label: '07116: Table in Folder 1'
                  sortOrder: 46
                  links:
                    - rel: metadata
                      href: https://my-site.com/api/v2/tables/ForstgenArbNye
                - id: al_al04
                  menuItemType: closed-folder
                  label: Folder 1 2
                  sortOrder: 47
                  links:
                    - rel: data
                      href: https://localhost:7067/navigate/treealt2/al_al04
        error: null
        info: null
    ResponseToDo:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              $ref: '#/components/schemas/ToDo'
    ResponseTableLocator:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              $ref: '#/components/schemas/TableLocator'
      description: This holds links for one table. To data, metadata the api and or to another application(a gui).
    ResponseSearchResultItemArrayPaginated:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - $ref: '#/components/schemas/SearchResultData'
        - $ref: '#/components/schemas/Pagination'
      additionalProperties: false
      description: Response to a seach, status 200 may be empty if no match is found.
    SearchResultData:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/SearchResultItem'
      example:
        data:
          - id: scb:23
            label: Navn etter kj√∏nn og alder
            updated: '2022-04-19T08:49:22.618Z'
            score: 1.99
          - id: scb:24
            label: Navn etter kj√∏nn og alder
            updated: '2022-04-19T08:49:22.618Z'
            score: 1.99
            nullable: true
    Pagination:
      type: object
      properties:
        pagination:
          type: object
          properties:
            pageOffset:
              type: integer
              format: int32
            pageSize:
              type: integer
              format: int32
              example: 33
            firstPage:
              type: string
              format: uri
              nullable: true
              description: Do we need this?
            lastPage:
              type: string
              format: uri
              nullable: true
              description: Do we need this?
            totalRecords:
              type: integer
              format: int32
            nextPage:
              type: string
              format: uri
              nullable: true
            previousPage:
              type: string
              format: uri
              nullable: true
      example:
        pageOffset: 10
        pageSize: 100
        firstPage: link.....firstpage
        lastPage: link....lastpage
        totalRecords: 7000
        nextPage: link...next
        previousPage: link...previous
    ConfigInfo:
      type: object
      properties:
        apiVersion:
          type: string
          description: The version of the specification this api conforms to(?).
          nullable: true
          example:
            x1: null
            value: '2.0'
        languages:
          type: array
          items:
            $ref: '#/components/schemas/Language'
          description: List of languages that data can be fetched as
          nullable: true
        defaultLanguage:
          type: string
          description: Which of the langue that are the default language.
          nullable: true
        dataRetrieval:
          $ref: '#/components/schemas/DataRetrieval'
        isMultiSource:
          type: boolean
          description: Does this api have more that one source.
        sources:
          type: array
          items:
            $ref: '#/components/schemas/Source'
          description: List of languages that data can be fetched as in this source
          nullable: true
      additionalProperties: false
    DataRetrieval:
      type: object
      properties:
        maxDataCells:
          type: integer
          description: Comment on field maxDataCells
          format: int32
      additionalProperties: false
      description: Comment on class DataRetrieval
    Language:
      type: object
      properties:
        id:
          type: string
          nullable: true
        label:
          type: string
          nullable: true
      additionalProperties: false
    Link:
      type: object
      properties:
        rel:
          type: string
          nullable: true
        href:
          type: string
          nullable: true
      additionalProperties: false
    MenuItem:
      type: object
      properties:
        id:
          type: string
          nullable: true
        menuItemType:
          type: string
          nullable: true
          description: One of heading, table or folder
        label:
          type: string
          nullable: true
          description: Display text
        description:
          type: string
          nullable: true
          description: Longer text describing menu item.
        tags:
          type: array
          items:
            type: string
            description: tag for menu item
          nullable: true
        sortOrder:
          type: integer
          format: int32
        links:
          type: array
          items:
            $ref: '#/components/schemas/Link'
          description: Not for Heading
          nullable: true
        updated:
          type: string
          description: For menuItemType "table"
          format: date-time
          nullable: true
        folderContent:
          type: array
          items:
            $ref: '#/components/schemas/MenuItem'
          nullable: true
        included:
          type: array
          items:
            $ref: '#/components/schemas/MenuItem'
          nullable: true
          description: Holds the prefetched items.
        category:
          type: string
          description: Mostly for internal use. Which category table belongs to. internal, official, private or section. I, O, P, S
          default: official
          enum:
          - internal
          - official
          - private
          - section     
        hasPart:
          type: array
          items:
            $ref: '#/components/schemas/MenuItem'
          nullable: true
          description: Holds the prefetched items.
        isPartOf:
          type: object
          $ref: '#/components/schemas/MenuItem'
      additionalProperties: false
    SearchResultItem:
      type: object
      properties:
        id:
          type: string
          description: '{instance}:{tableID}'
          nullable: true
          example: scb:22
        label:
          type: string
          nullable: true
        updated:
          type: string
          format: date-time
          nullable: true
        links:
          type: array
          items:
            $ref: '#/components/schemas/Link'
          nullable: true
        sourceId:
          type: string
          description: Id of source application instance where the table is found.
          nullable: true
        score:
          type: number
          description: Search score (relevance of search)
          format: float
      additionalProperties: false
      example:
        id: scb:23
    Problem:
      type: object
      properties:
        type:
          type: string
          format: uri
          description: |
            An absolute URI that identifies the problem type.  When dereferenced,
            it SHOULD provide human-readable documentation for the problem type
            (e.g., using HTML).
          default: about:blank
          example: https://zalando.github.io/problem/constraint-violation
        title:
          type: string
          description: |
            A short, summary of the problem type. Written in english and readable
            for engineers (usually not suited for non technical stakeholders and
            not localized); example: Service Unavailable
        status:
          type: integer
          format: int32
          description: |
            The HTTP status code generated by the origin server for this occurrence
            of the problem.
          minimum: 100
          maximum: 600
          exclusiveMaximum: true
          example: 503
        detail:
          type: string
          description: |
            A human readable explanation specific to this occurrence of the
            problem.
          example: Connection to database timed out
        instance:
          type: string
          format: uri
          description: |
            An absolute URI that identifies the specific occurrence of the problem.
            It may or may not yield further information if dereferenced.
    Source:
      type: object
      properties:
        id:
          type: string
          nullable: true
        apiVersjon:
          type: string
          nullable: true
        sourceType:
          type: string
          description: PX or SSB? :-)
          nullable: true
        name:
          type: object
          additionalProperties:
            type: string
          nullable: true
        searchUrlFormat:
          type: string
          nullable: true
        searchToTableFormat:
          type: object
          additionalProperties:
            type: string
          nullable: true
      additionalProperties: false
    TableLocator:
      type: object
      properties:
        id:
          type: string
          description: '{instance}:{tableID}'
          nullable: true
        label:
          type: string
          nullable: true
        updated:
          type: string
          format: date-time
          nullable: true
        links:
          type: array
          items:
            $ref: '#/components/schemas/Link'
          nullable: true
      additionalProperties: false
      description: Should hold the info needed to decide if this is interesting or not.
    ToDo:
      type: object
      properties:
        something:
          type: string
          nullable: true
      additionalProperties: false
    BaseMenuItem:
      type: object
      properties:
        id:
          type: string
          nullable: true
        menuItemType:
          type: string
          nullable: true
          description: One of heading, table or folder
        label:
          type: string
          nullable: true
          description: Display text
        description:
          type: string
          nullable: true
          description: Longer text describing menu item.
        sortOrder:
          type: string
          description: Sort order.
      discriminator:
         propertyName:  menuItemType
         mapping:
           table: '#/components/schemas/TableMenuItem'
           heading: '#/components/schemas/HeadingMenuItem'
           folder: '#/components/schemas/FolderItem'
      anyOf:
        - $ref: '#/components/schemas/TableMenuItem'
        - $ref: '#/components/schemas/HeadingMenuItem'
        - $ref: '#/components/schemas/FolderItem'
        
    TableMenuItem:
      allOf:
        - $ref: '#/components/schemas/BaseMenuItem'
        - type: object
          description: Table menu item
          properties:
            updated:
              type: string
              description: For menuItemType "table"
              format: date-time
              nullable: true
            tags:
              type: array
              items:
                type: string
                description: tag for menu item
              nullable: true
            category:
              type: string
              description: Mostly for internal use. Which category table belongs to. internal, official, private or section. I, O, P, S
              default: official
              enum:
              - internal
              - official
              - private
              - section     
            links:
              type: array
              items:
                $ref: '#/components/schemas/Link'
              description: Not for Heading
              nullable: true
    FolderItem:
      allOf:
        - $ref: '#/components/schemas/BaseMenuItem'
        - type: object
          description: Folder item
          properties:
            tags:
              type: array
              items:
                type: string
                description: tag for menu item
              nullable: true
            folderContent:
              type: array
              items:
                $ref: '#/components/schemas/BaseMenuItem'
              nullable: true
            included:
              type: array
              items:
                $ref: '#/components/schemas/BaseMenuItem'
              nullable: true
              description: Holds the prefetched items.
            links:
              type: array
              items:
                $ref: '#/components/schemas/Link'
              description: Not for Heading
              nullable: true
    HeadingMenuItem:
      allOf:
        - $ref: '#/components/schemas/BaseMenuItem'
        - type: object
          description: Pedaled Vehicle
          properties:
             maxSpeed:
               description: The top speed in kilometers per hour rounded to the nearest integer.
               type: integer
               example: 83         
  responses:
    ErrorResponse429:
      description: Error respsone for 429
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/Problem'
          example:
            title: Too many requests
            status: 429
            detail: You have reach the threshold for request limiting. 30 request per minute.
tags:
  - name: TreeAlt2
    description: Endpoints for the menutree.
  - name: Tables
    description: Endpoints for the tables
  - name: ConfigInfo
    description: Endpoints for getting information about config.
