/*
 * PxApi
 *
 * This api lets you: Find a table and extract table metadata and data. 
 *
 * The version of the OpenAPI document: 2.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using PxWeb.Api2.Server.Converters;

namespace PxWeb.Api2.Server.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public class SavedQuery : IEquatable<SavedQuery>
    {
        /// <summary>
        /// The id of the saved query
        /// </summary>
        /// <value>The id of the saved query</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string? Id { get; set; }

        /// <summary>
        /// Gets or Sets Selection
        /// </summary>
        [Required]
        [DataMember(Name="selection", EmitDefaultValue=false)]
        public VariablesSelection Selection { get; set; }

        /// <summary>
        /// language code for the language used in this response
        /// </summary>
        /// <value>language code for the language used in this response</value>
        [Required]
        [DataMember(Name="language", EmitDefaultValue=false)]
        public string Language { get; set; }

        /// <summary>
        /// which table the query is for
        /// </summary>
        /// <value>which table the query is for</value>
        [Required]
        [DataMember(Name="tableId", EmitDefaultValue=false)]
        public string TableId { get; set; }

        /// <summary>
        /// Gets or Sets OutputFormat
        /// </summary>
        [DataMember(Name="outputFormat", EmitDefaultValue=true)]
        public OutputFormatType OutputFormat { get; set; }

        /// <summary>
        /// Gets or Sets OutputFormatParams
        /// </summary>
        [DataMember(Name="outputFormatParams", EmitDefaultValue=false)]
        public List<OutputFormatParamType> OutputFormatParams { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SavedQuery {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Selection: ").Append(Selection).Append("\n");
            sb.Append("  Language: ").Append(Language).Append("\n");
            sb.Append("  TableId: ").Append(TableId).Append("\n");
            sb.Append("  OutputFormat: ").Append(OutputFormat).Append("\n");
            sb.Append("  OutputFormatParams: ").Append(OutputFormatParams).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((SavedQuery)obj);
        }

        /// <summary>
        /// Returns true if SavedQuery instances are equal
        /// </summary>
        /// <param name="other">Instance of SavedQuery to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SavedQuery other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    Selection == other.Selection ||
                    Selection != null &&
                    Selection.Equals(other.Selection)
                ) && 
                (
                    Language == other.Language ||
                    Language != null &&
                    Language.Equals(other.Language)
                ) && 
                (
                    TableId == other.TableId ||
                    TableId != null &&
                    TableId.Equals(other.TableId)
                ) && 
                (
                    OutputFormat == other.OutputFormat ||
                    
                    OutputFormat.Equals(other.OutputFormat)
                ) && 
                (
                    OutputFormatParams == other.OutputFormatParams ||
                    OutputFormatParams != null &&
                    other.OutputFormatParams != null &&
                    OutputFormatParams.SequenceEqual(other.OutputFormatParams)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (Selection != null)
                    hashCode = hashCode * 59 + Selection.GetHashCode();
                    if (Language != null)
                    hashCode = hashCode * 59 + Language.GetHashCode();
                    if (TableId != null)
                    hashCode = hashCode * 59 + TableId.GetHashCode();
                    
                    hashCode = hashCode * 59 + OutputFormat.GetHashCode();
                    if (OutputFormatParams != null)
                    hashCode = hashCode * 59 + OutputFormatParams.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(SavedQuery left, SavedQuery right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(SavedQuery left, SavedQuery right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
