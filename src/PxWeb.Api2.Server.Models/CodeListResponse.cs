/*
 * PxApi
 *
 * This api lets you: Find a table and extract table metadata and data. 
 *
 * The version of the OpenAPI document: 2.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using PxWeb.Api2.Server.Converters;

namespace PxWeb.Api2.Server.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public class CodelistResponse : IEquatable<CodelistResponse>
    {
        /// <summary>
        /// The identiyer for the codelist
        /// </summary>
        /// <value>The identiyer for the codelist</value>
        /* <example>agg_RegionNUTS2_2008</example> */
        [Required]
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// The textual name  for the codelist.
        /// </summary>
        /// <value>The textual name  for the codelist.</value>
        /* <example>NUTS2 fr.o.m 2008</example> */
        [Required]
        [DataMember(Name="label", EmitDefaultValue=false)]
        public string Label { get; set; }

        /// <summary>
        /// The language code for the language used in this response
        /// </summary>
        /// <value>The language code for the language used in this response</value>
        /* <example>sv</example> */
        [Required]
        [DataMember(Name="language", EmitDefaultValue=false)]
        public string Language { get; set; }

        /// <summary>
        /// The languages that the codelist is available in
        /// </summary>
        /// <value>The languages that the codelist is available in</value>
        [Required]
        [DataMember(Name="languages", EmitDefaultValue=false)]
        public List<string> Languages { get; set; }

        /// <summary>
        /// If the codelist is eliminatable
        /// </summary>
        /// <value>If the codelist is eliminatable</value>
        [DataMember(Name="elimination", EmitDefaultValue=true)]
        public bool? Elimination { get; set; } = false;

        /// <summary>
        /// The value code that should be used for elimination. If not set the variable will be eliminated by summing up all values.
        /// </summary>
        /// <value>The value code that should be used for elimination. If not set the variable will be eliminated by summing up all values.</value>
        [DataMember(Name="eliminationValueCode", EmitDefaultValue=false)]
        public string? EliminationValueCode { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [Required]
        [DataMember(Name="type", EmitDefaultValue=true)]
        public CodelistType Type { get; set; }

        /// <summary>
        /// Gets or Sets Values
        /// </summary>
        [Required]
        [DataMember(Name="values", EmitDefaultValue=false)]
        public List<ValueMap> Values { get; set; }

        /// <summary>
        /// Gets or Sets Links
        /// </summary>
        [Required]
        [DataMember(Name="links", EmitDefaultValue=false)]
        public List<Link> Links { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CodelistResponse {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Label: ").Append(Label).Append("\n");
            sb.Append("  Language: ").Append(Language).Append("\n");
            sb.Append("  Languages: ").Append(Languages).Append("\n");
            sb.Append("  Elimination: ").Append(Elimination).Append("\n");
            sb.Append("  EliminationValueCode: ").Append(EliminationValueCode).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Values: ").Append(Values).Append("\n");
            sb.Append("  Links: ").Append(Links).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((CodelistResponse)obj);
        }

        /// <summary>
        /// Returns true if CodelistResponse instances are equal
        /// </summary>
        /// <param name="other">Instance of CodelistResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CodelistResponse other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    Label == other.Label ||
                    Label != null &&
                    Label.Equals(other.Label)
                ) && 
                (
                    Language == other.Language ||
                    Language != null &&
                    Language.Equals(other.Language)
                ) && 
                (
                    Languages == other.Languages ||
                    Languages != null &&
                    other.Languages != null &&
                    Languages.SequenceEqual(other.Languages)
                ) && 
                (
                    Elimination == other.Elimination ||
                    
                    Elimination.Equals(other.Elimination)
                ) && 
                (
                    EliminationValueCode == other.EliminationValueCode ||
                    EliminationValueCode != null &&
                    EliminationValueCode.Equals(other.EliminationValueCode)
                ) && 
                (
                    Type == other.Type ||
                    
                    Type.Equals(other.Type)
                ) && 
                (
                    Values == other.Values ||
                    Values != null &&
                    other.Values != null &&
                    Values.SequenceEqual(other.Values)
                ) && 
                (
                    Links == other.Links ||
                    Links != null &&
                    other.Links != null &&
                    Links.SequenceEqual(other.Links)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (Label != null)
                    hashCode = hashCode * 59 + Label.GetHashCode();
                    if (Language != null)
                    hashCode = hashCode * 59 + Language.GetHashCode();
                    if (Languages != null)
                    hashCode = hashCode * 59 + Languages.GetHashCode();
                    
                    hashCode = hashCode * 59 + Elimination.GetHashCode();
                    if (EliminationValueCode != null)
                    hashCode = hashCode * 59 + EliminationValueCode.GetHashCode();
                    
                    hashCode = hashCode * 59 + Type.GetHashCode();
                    if (Values != null)
                    hashCode = hashCode * 59 + Values.GetHashCode();
                    if (Links != null)
                    hashCode = hashCode * 59 + Links.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(CodelistResponse left, CodelistResponse right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(CodelistResponse left, CodelistResponse right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
