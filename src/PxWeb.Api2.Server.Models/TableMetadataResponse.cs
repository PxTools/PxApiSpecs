/*
 * PxApi
 *
 * This api lets you do 2 things; Find a table(Navigation) and use a table (Table).  _Table below is added to show how tables can be described in yml._  **Table contains status code this API may return** | Status code    | Description      | Reason                      | | - -- -- --        | - -- -- -- -- --      | - -- -- -- -- -- -- -- -- -- --       | | 200            | Success          | The endpoint has delivered response for the request                      | | 400            | Bad request      | If the request is not valid | | 403            | Forbidden        | number of cells exceed the API limit | | 404            | Not found        | If the URL in request does not exist | | 429            | Too many request | Requests exceed the API time limit. Large queries should be run in sequence | | 50X            | Internal Server Error | The service might be down | 
 *
 * The version of the OpenAPI document: 2.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using PxWeb.Api2.Server.Converters;

namespace PxWeb.Api2.Server.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public class TableMetadataResponse : IEquatable<TableMetadataResponse>
    {
        /// <summary>
        /// The language code (ISO 639) for this response
        /// </summary>
        /// <value>The language code (ISO 639) for this response</value>
        [Required]
        [DataMember(Name="language", EmitDefaultValue=false)]
        public string Language { get; set; }

        /// <summary>
        /// Identifier for the table.
        /// </summary>
        /// <value>Identifier for the table.</value>
        /* <example>TAB0001</example> */
        [Required]
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// A title for the table that describes the content of it.
        /// </summary>
        /// <value>A title for the table that describes the content of it.</value>
        /* <example>Corporations Financial Assets and Liabilities. Quarterly 1998K2 - 2021K4</example> */
        [Required]
        [DataMember(Name="label", EmitDefaultValue=false)]
        public string Label { get; set; }

        /// <summary>
        /// A description of the table.
        /// </summary>
        /// <value>A description of the table.</value>
        /* <example>Corporations Financial Assets and Liabilities by item. Quarterly 1998K2 - 2021K4 [2022-03-11]</example> */
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string? Description { get; set; }

        /// <summary>
        /// If all content of the table can be aggregated.
        /// </summary>
        /// <value>If all content of the table can be aggregated.</value>
        [DataMember(Name="aggregationAllowed", EmitDefaultValue=true)]
        public bool? AggregationAllowed { get; set; }

        /// <summary>
        /// A marker if the table is a part of the national official statistics.
        /// </summary>
        /// <value>A marker if the table is a part of the national official statistics.</value>
        [DataMember(Name="officialStatistics", EmitDefaultValue=true)]
        public bool? OfficialStatistics { get; set; }

        /// <summary>
        /// The code for the subject area that the table belongs to.
        /// </summary>
        /// <value>The code for the subject area that the table belongs to.</value>
        /* <example>BE</example> */
        [DataMember(Name="subjectCode", EmitDefaultValue=false)]
        public string? SubjectCode { get; set; }

        /// <summary>
        /// The label for the subject area that the table belongs to.
        /// </summary>
        /// <value>The label for the subject area that the table belongs to.</value>
        /* <example>Population</example> */
        [DataMember(Name="subjectLabel", EmitDefaultValue=false)]
        public string? SubjectLabel { get; set; }

        /// <summary>
        /// The name of the organization responsible for the table.
        /// </summary>
        /// <value>The name of the organization responsible for the table.</value>
        /* <example>Statistics Sweden</example> */
        [DataMember(Name="source", EmitDefaultValue=false)]
        public string? Source { get; set; }

        /// <summary>
        /// A copyright statement for the data it could also be SPDX (https://spdx.org/licenses/) identifier
        /// </summary>
        /// <value>A copyright statement for the data it could also be SPDX (https://spdx.org/licenses/) identifier</value>
        /* <example>CC0-1.0</example> */
        [DataMember(Name="license", EmitDefaultValue=false)]
        public string? License { get; set; }

        /// <summary>
        /// A list of strings/tags associated with the table
        /// </summary>
        /// <value>A list of strings/tags associated with the table</value>
        [DataMember(Name="tags", EmitDefaultValue=false)]
        public List<string> Tags { get; set; }

        /// <summary>
        /// Date and time when the figures in the table was last updated, in UTC time.
        /// </summary>
        /// <value>Date and time when the figures in the table was last updated, in UTC time.</value>
        [RegularExpression("^((19|20)\\d\\d)\\-(0?[1-9]|1[012])\\-(0?[1-9]|[12][0-9]|3[01])$")]
        [DataMember(Name="updated", EmitDefaultValue=true)]
        public DateTime? Updated { get; set; }

        /// <summary>
        /// If the table is discontinued or not. That is if it no longer updated with new figures.
        /// </summary>
        /// <value>If the table is discontinued or not. That is if it no longer updated with new figures.</value>
        [DataMember(Name="discontinued", EmitDefaultValue=true)]
        public bool? Discontinued { get; set; }

        /// <summary>
        /// A list of notes associated with the table as a whole or a specific area of the table
        /// </summary>
        /// <value>A list of notes associated with the table as a whole or a specific area of the table</value>
        [DataMember(Name="notes", EmitDefaultValue=false)]
        public List<CellNote> Notes { get; set; }

        /// <summary>
        /// A list of contacts associated with the table.
        /// </summary>
        /// <value>A list of contacts associated with the table.</value>
        [DataMember(Name="contacts", EmitDefaultValue=false)]
        public List<Contact> Contacts { get; set; }

        /// <summary>
        /// Gets or Sets Variables
        /// </summary>
        [Required]
        [DataMember(Name="variables", EmitDefaultValue=false)]
        public List<AbstractVariable> Variables { get; set; }

        /// <summary>
        /// Gets or Sets Links
        /// </summary>
        [Required]
        [DataMember(Name="links", EmitDefaultValue=false)]
        public List<Link> Links { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TableMetadataResponse {\n");
            sb.Append("  Language: ").Append(Language).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Label: ").Append(Label).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  AggregationAllowed: ").Append(AggregationAllowed).Append("\n");
            sb.Append("  OfficialStatistics: ").Append(OfficialStatistics).Append("\n");
            sb.Append("  SubjectCode: ").Append(SubjectCode).Append("\n");
            sb.Append("  SubjectLabel: ").Append(SubjectLabel).Append("\n");
            sb.Append("  Source: ").Append(Source).Append("\n");
            sb.Append("  License: ").Append(License).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  Updated: ").Append(Updated).Append("\n");
            sb.Append("  Discontinued: ").Append(Discontinued).Append("\n");
            sb.Append("  Notes: ").Append(Notes).Append("\n");
            sb.Append("  Contacts: ").Append(Contacts).Append("\n");
            sb.Append("  Variables: ").Append(Variables).Append("\n");
            sb.Append("  Links: ").Append(Links).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((TableMetadataResponse)obj);
        }

        /// <summary>
        /// Returns true if TableMetadataResponse instances are equal
        /// </summary>
        /// <param name="other">Instance of TableMetadataResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TableMetadataResponse other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Language == other.Language ||
                    Language != null &&
                    Language.Equals(other.Language)
                ) && 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    Label == other.Label ||
                    Label != null &&
                    Label.Equals(other.Label)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                ) && 
                (
                    AggregationAllowed == other.AggregationAllowed ||
                    
                    AggregationAllowed.Equals(other.AggregationAllowed)
                ) && 
                (
                    OfficialStatistics == other.OfficialStatistics ||
                    
                    OfficialStatistics.Equals(other.OfficialStatistics)
                ) && 
                (
                    SubjectCode == other.SubjectCode ||
                    SubjectCode != null &&
                    SubjectCode.Equals(other.SubjectCode)
                ) && 
                (
                    SubjectLabel == other.SubjectLabel ||
                    SubjectLabel != null &&
                    SubjectLabel.Equals(other.SubjectLabel)
                ) && 
                (
                    Source == other.Source ||
                    Source != null &&
                    Source.Equals(other.Source)
                ) && 
                (
                    License == other.License ||
                    License != null &&
                    License.Equals(other.License)
                ) && 
                (
                    Tags == other.Tags ||
                    Tags != null &&
                    other.Tags != null &&
                    Tags.SequenceEqual(other.Tags)
                ) && 
                (
                    Updated == other.Updated ||
                    Updated != null &&
                    Updated.Equals(other.Updated)
                ) && 
                (
                    Discontinued == other.Discontinued ||
                    Discontinued != null &&
                    Discontinued.Equals(other.Discontinued)
                ) && 
                (
                    Notes == other.Notes ||
                    Notes != null &&
                    other.Notes != null &&
                    Notes.SequenceEqual(other.Notes)
                ) && 
                (
                    Contacts == other.Contacts ||
                    Contacts != null &&
                    other.Contacts != null &&
                    Contacts.SequenceEqual(other.Contacts)
                ) && 
                (
                    Variables == other.Variables ||
                    Variables != null &&
                    other.Variables != null &&
                    Variables.SequenceEqual(other.Variables)
                ) && 
                (
                    Links == other.Links ||
                    Links != null &&
                    other.Links != null &&
                    Links.SequenceEqual(other.Links)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Language != null)
                    hashCode = hashCode * 59 + Language.GetHashCode();
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (Label != null)
                    hashCode = hashCode * 59 + Label.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    
                    hashCode = hashCode * 59 + AggregationAllowed.GetHashCode();
                    
                    hashCode = hashCode * 59 + OfficialStatistics.GetHashCode();
                    if (SubjectCode != null)
                    hashCode = hashCode * 59 + SubjectCode.GetHashCode();
                    if (SubjectLabel != null)
                    hashCode = hashCode * 59 + SubjectLabel.GetHashCode();
                    if (Source != null)
                    hashCode = hashCode * 59 + Source.GetHashCode();
                    if (License != null)
                    hashCode = hashCode * 59 + License.GetHashCode();
                    if (Tags != null)
                    hashCode = hashCode * 59 + Tags.GetHashCode();
                    if (Updated != null)
                    hashCode = hashCode * 59 + Updated.GetHashCode();
                    if (Discontinued != null)
                    hashCode = hashCode * 59 + Discontinued.GetHashCode();
                    if (Notes != null)
                    hashCode = hashCode * 59 + Notes.GetHashCode();
                    if (Contacts != null)
                    hashCode = hashCode * 59 + Contacts.GetHashCode();
                    if (Variables != null)
                    hashCode = hashCode * 59 + Variables.GetHashCode();
                    if (Links != null)
                    hashCode = hashCode * 59 + Links.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(TableMetadataResponse left, TableMetadataResponse right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(TableMetadataResponse left, TableMetadataResponse right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
