/*
 * PxApi
 *
 * This api lets you do 2 things; Find a table(Navigation) and use a table (Table).  _Table below is added to show how tables can be described in yml._  **Table contains status code this API may return** | Status code    | Description      | Reason                      | | - -- -- --        | - -- -- -- -- --      | - -- -- -- -- -- -- -- -- -- --       | | 200            | Success          | The endpoint has delivered response for the request                      | | 400            | Bad request      | If the request is not valid | | 403            | Forbidden        | number of cells exceed the API limit | | 404            | Not found        | If the URL in request does not exist | | 429            | Too many request | Requests exceed the API time limit. Large queries should be run in sequence | | 50X            | Internal Server Error | The service might be down | 
 *
 * The version of the OpenAPI document: 2.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using PxWeb.Api2.Server.Converters;

namespace PxWeb.Api2.Server.Models
{ 
    /// <summary>
    /// Content value
    /// </summary>
    [DataContract]
    public class ContentValue : IEquatable<ContentValue>
    {
        /// <summary>
        /// Gets or Sets Baseperiod
        /// </summary>
        [DataMember(Name="baseperiod", EmitDefaultValue=true)]
        public string? Baseperiod { get; set; }


        /// <summary>
        /// Gets or Sets Adjustment
        /// </summary>
        [TypeConverter(typeof(CustomEnumConverter<AdjustmentEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum AdjustmentEnum
        {
            
            /// <summary>
            /// Enum NoneEnum for None
            /// </summary>
            [EnumMember(Value = "None")]
            NoneEnum = 1,
            
            /// <summary>
            /// Enum SesOnlyEnum for SesOnly
            /// </summary>
            [EnumMember(Value = "SesOnly")]
            SesOnlyEnum = 2,
            
            /// <summary>
            /// Enum WorkOnlyEnum for WorkOnly
            /// </summary>
            [EnumMember(Value = "WorkOnly")]
            WorkOnlyEnum = 3,
            
            /// <summary>
            /// Enum WorkAndSesEnum for WorkAndSes
            /// </summary>
            [EnumMember(Value = "WorkAndSes")]
            WorkAndSesEnum = 4
        }

        /// <summary>
        /// Gets or Sets Adjustment
        /// </summary>
        [DataMember(Name="adjustment", EmitDefaultValue=true)]
        public AdjustmentEnum Adjustment { get; set; } = AdjustmentEnum.NoneEnum;


        /// <summary>
        /// Gets or Sets MeasuringType
        /// </summary>
        [TypeConverter(typeof(CustomEnumConverter<MeasuringTypeEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum MeasuringTypeEnum
        {
            
            /// <summary>
            /// Enum StockEnum for Stock
            /// </summary>
            [EnumMember(Value = "Stock")]
            StockEnum = 1,
            
            /// <summary>
            /// Enum FlowEnum for Flow
            /// </summary>
            [EnumMember(Value = "Flow")]
            FlowEnum = 2,
            
            /// <summary>
            /// Enum AverageEnum for Average
            /// </summary>
            [EnumMember(Value = "Average")]
            AverageEnum = 3,
            
            /// <summary>
            /// Enum OtherEnum for Other
            /// </summary>
            [EnumMember(Value = "Other")]
            OtherEnum = 4
        }

        /// <summary>
        /// Gets or Sets MeasuringType
        /// </summary>
        [DataMember(Name="measuringType", EmitDefaultValue=true)]
        public MeasuringTypeEnum MeasuringType { get; set; } = MeasuringTypeEnum.OtherEnum;

        /// <summary>
        /// Gets or Sets PreferedNumberOfDecimals
        /// </summary>
        [DataMember(Name="preferedNumberOfDecimals", EmitDefaultValue=true)]
        public int PreferedNumberOfDecimals { get; set; }


        /// <summary>
        /// Gets or Sets PriceType
        /// </summary>
        [TypeConverter(typeof(CustomEnumConverter<PriceTypeEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum PriceTypeEnum
        {
            
            /// <summary>
            /// Enum UndefinedEnum for Undefined
            /// </summary>
            [EnumMember(Value = "Undefined")]
            UndefinedEnum = 1,
            
            /// <summary>
            /// Enum CurrentEnum for Current
            /// </summary>
            [EnumMember(Value = "Current")]
            CurrentEnum = 2,
            
            /// <summary>
            /// Enum FixedEnum for Fixed
            /// </summary>
            [EnumMember(Value = "Fixed")]
            FixedEnum = 3
        }

        /// <summary>
        /// Gets or Sets PriceType
        /// </summary>
        [DataMember(Name="priceType", EmitDefaultValue=true)]
        public PriceTypeEnum PriceType { get; set; }

        /// <summary>
        /// Gets or Sets Unit
        /// </summary>
        [Required]
        [DataMember(Name="unit", EmitDefaultValue=false)]
        public string Unit { get; set; }

        /// <summary>
        /// Gets or Sets RefrencePeriod
        /// </summary>
        [DataMember(Name="refrencePeriod", EmitDefaultValue=false)]
        public string RefrencePeriod { get; set; }

        /// <summary>
        /// A code representing the value.
        /// </summary>
        /// <value>A code representing the value.</value>
        [Required]
        [DataMember(Name="code", EmitDefaultValue=false)]
        public string Code { get; set; }

        /// <summary>
        /// A Textual name for the value
        /// </summary>
        /// <value>A Textual name for the value</value>
        [Required]
        [DataMember(Name="label", EmitDefaultValue=false)]
        public string Label { get; set; }

        /// <summary>
        /// Optional notes that are associated with the value
        /// </summary>
        /// <value>Optional notes that are associated with the value</value>
        [DataMember(Name="notes", EmitDefaultValue=false)]
        public List<Note> Notes { get; set; }

        /// <summary>
        /// Gets or Sets Links
        /// </summary>
        [DataMember(Name="links", EmitDefaultValue=false)]
        public List<Link> Links { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ContentValue {\n");
            sb.Append("  Baseperiod: ").Append(Baseperiod).Append("\n");
            sb.Append("  Adjustment: ").Append(Adjustment).Append("\n");
            sb.Append("  MeasuringType: ").Append(MeasuringType).Append("\n");
            sb.Append("  PreferedNumberOfDecimals: ").Append(PreferedNumberOfDecimals).Append("\n");
            sb.Append("  PriceType: ").Append(PriceType).Append("\n");
            sb.Append("  Unit: ").Append(Unit).Append("\n");
            sb.Append("  RefrencePeriod: ").Append(RefrencePeriod).Append("\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  Label: ").Append(Label).Append("\n");
            sb.Append("  Notes: ").Append(Notes).Append("\n");
            sb.Append("  Links: ").Append(Links).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ContentValue)obj);
        }

        /// <summary>
        /// Returns true if ContentValue instances are equal
        /// </summary>
        /// <param name="other">Instance of ContentValue to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ContentValue other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Baseperiod == other.Baseperiod ||
                    Baseperiod != null &&
                    Baseperiod.Equals(other.Baseperiod)
                ) && 
                (
                    Adjustment == other.Adjustment ||
                    
                    Adjustment.Equals(other.Adjustment)
                ) && 
                (
                    MeasuringType == other.MeasuringType ||
                    
                    MeasuringType.Equals(other.MeasuringType)
                ) && 
                (
                    PreferedNumberOfDecimals == other.PreferedNumberOfDecimals ||
                    
                    PreferedNumberOfDecimals.Equals(other.PreferedNumberOfDecimals)
                ) && 
                (
                    PriceType == other.PriceType ||
                    
                    PriceType.Equals(other.PriceType)
                ) && 
                (
                    Unit == other.Unit ||
                    Unit != null &&
                    Unit.Equals(other.Unit)
                ) && 
                (
                    RefrencePeriod == other.RefrencePeriod ||
                    RefrencePeriod != null &&
                    RefrencePeriod.Equals(other.RefrencePeriod)
                ) && 
                (
                    Code == other.Code ||
                    Code != null &&
                    Code.Equals(other.Code)
                ) && 
                (
                    Label == other.Label ||
                    Label != null &&
                    Label.Equals(other.Label)
                ) && 
                (
                    Notes == other.Notes ||
                    Notes != null &&
                    other.Notes != null &&
                    Notes.SequenceEqual(other.Notes)
                ) && 
                (
                    Links == other.Links ||
                    Links != null &&
                    other.Links != null &&
                    Links.SequenceEqual(other.Links)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Baseperiod != null)
                    hashCode = hashCode * 59 + Baseperiod.GetHashCode();
                    
                    hashCode = hashCode * 59 + Adjustment.GetHashCode();
                    
                    hashCode = hashCode * 59 + MeasuringType.GetHashCode();
                    
                    hashCode = hashCode * 59 + PreferedNumberOfDecimals.GetHashCode();
                    
                    hashCode = hashCode * 59 + PriceType.GetHashCode();
                    if (Unit != null)
                    hashCode = hashCode * 59 + Unit.GetHashCode();
                    if (RefrencePeriod != null)
                    hashCode = hashCode * 59 + RefrencePeriod.GetHashCode();
                    if (Code != null)
                    hashCode = hashCode * 59 + Code.GetHashCode();
                    if (Label != null)
                    hashCode = hashCode * 59 + Label.GetHashCode();
                    if (Notes != null)
                    hashCode = hashCode * 59 + Notes.GetHashCode();
                    if (Links != null)
                    hashCode = hashCode * 59 + Links.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ContentValue left, ContentValue right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ContentValue left, ContentValue right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
