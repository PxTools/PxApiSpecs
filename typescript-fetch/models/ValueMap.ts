/* tslint:disable */
/* eslint-disable */
/**
 * PxApi
 * This api lets you do 2 things; Find a table(Navigation) and use a table (Table).  _Table below is added to show how tables can be described in yml._  **Table contains status code this API may return** | Status code    | Description      | Reason                      | | -------        | -----------      | ---------------------       | | 200            | Success          | The endpoint has delivered response for the request                      | | 400            | Bad request      | If the request is not valid | | 403            | Forbidden        | number of cells exceed the API limit | | 404            | Not found        | If the URL in request does not exist | | 429            | Too many request | Requests exceed the API time limit. Large queries should be run in sequence | | 50X            | Internal Server Error | The service might be down | 
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Note } from './Note';
import {
    NoteFromJSON,
    NoteFromJSONTyped,
    NoteToJSON,
    NoteToJSONTyped,
} from './Note';

/**
 * 
 * @export
 * @interface ValueMap
 */
export interface ValueMap {
    /**
     * The code for the value.
     * @type {string}
     * @memberof ValueMap
     */
    code: string;
    /**
     * The textual representation for the value
     * @type {string}
     * @memberof ValueMap
     */
    label: string;
    /**
     * An array of codes from the origial codelist for the variable that cand be mapped to this value
     * @type {Array<string>}
     * @memberof ValueMap
     */
    valueMap: Array<string>;
    /**
     * Optional notes that are associated with the value
     * @type {Array<Note>}
     * @memberof ValueMap
     */
    notes?: Array<Note>;
}

/**
 * Check if a given object implements the ValueMap interface.
 */
export function instanceOfValueMap(value: object): value is ValueMap {
    if (!('code' in value) || value['code'] === undefined) return false;
    if (!('label' in value) || value['label'] === undefined) return false;
    if (!('valueMap' in value) || value['valueMap'] === undefined) return false;
    return true;
}

export function ValueMapFromJSON(json: any): ValueMap {
    return ValueMapFromJSONTyped(json, false);
}

export function ValueMapFromJSONTyped(json: any, ignoreDiscriminator: boolean): ValueMap {
    if (json == null) {
        return json;
    }
    return {
        
        'code': json['code'],
        'label': json['label'],
        'valueMap': json['valueMap'],
        'notes': json['notes'] == null ? undefined : ((json['notes'] as Array<any>).map(NoteFromJSON)),
    };
}

export function ValueMapToJSON(json: any): ValueMap {
    return ValueMapToJSONTyped(json, false);
}

export function ValueMapToJSONTyped(value?: ValueMap | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'code': value['code'],
        'label': value['label'],
        'valueMap': value['valueMap'],
        'notes': value['notes'] == null ? undefined : ((value['notes'] as Array<any>).map(NoteToJSON)),
    };
}

