/* tslint:disable */
/* eslint-disable */
/**
 * PxApi
 * This api lets you do 2 things; Find a table(Navigation) and use a table (Table).  _Table below is added to show how tables can be described in yml._  **Table contains status code this API may return** | Status code    | Description      | Reason                      | | -------        | -----------      | ---------------------       | | 200            | Success          | The endpoint has delivered response for the request                      | | 400            | Bad request      | If the request is not valid | | 403            | Forbidden        | number of cells exceed the API limit | | 404            | Not found        | If the URL in request does not exist | | 429            | Too many request | Requests exceed the API time limit. Large queries should be run in sequence | | 50X            | Internal Server Error | The service might be down | 
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ExtensionRootPx } from './ExtensionRootPx';
import {
    ExtensionRootPxFromJSON,
    ExtensionRootPxFromJSONTyped,
    ExtensionRootPxToJSON,
    ExtensionRootPxToJSONTyped,
} from './ExtensionRootPx';
import type { Contact } from './Contact';
import {
    ContactFromJSON,
    ContactFromJSONTyped,
    ContactToJSON,
    ContactToJSONTyped,
} from './Contact';

/**
 * extension at root level
 * @export
 * @interface ExtensionRoot
 */
export interface ExtensionRoot {
    /**
     * Describes if a note of a certain index is mandatory.
     * @type {{ [key: string]: boolean; }}
     * @memberof ExtensionRoot
     */
    noteMandatory?: { [key: string]: boolean; };
    /**
     * 
     * @type {ExtensionRootPx}
     * @memberof ExtensionRoot
     */
    px?: ExtensionRootPx;
    /**
     * Earliest time period in table
     * @type {string}
     * @memberof ExtensionRoot
     */
    firstPeriod?: string;
    /**
     * Latest time period in table
     * @type {string}
     * @memberof ExtensionRoot
     */
    lastPeriod?: string;
    /**
     * Tag for table
     * @type {Array<string>}
     * @memberof ExtensionRoot
     */
    tags?: Array<string>;
    /**
     * If the table is discontinued or not. That is if it no longer updated with new figures.
     * @type {boolean}
     * @memberof ExtensionRoot
     */
    discontinued?: boolean | null;
    /**
     * A list of contacts associated with the table.
     * @type {Array<Contact>}
     * @memberof ExtensionRoot
     */
    contact?: Array<Contact>;
}

/**
 * Check if a given object implements the ExtensionRoot interface.
 */
export function instanceOfExtensionRoot(value: object): value is ExtensionRoot {
    return true;
}

export function ExtensionRootFromJSON(json: any): ExtensionRoot {
    return ExtensionRootFromJSONTyped(json, false);
}

export function ExtensionRootFromJSONTyped(json: any, ignoreDiscriminator: boolean): ExtensionRoot {
    if (json == null) {
        return json;
    }
    return {
        
        'noteMandatory': json['noteMandatory'] == null ? undefined : json['noteMandatory'],
        'px': json['px'] == null ? undefined : ExtensionRootPxFromJSON(json['px']),
        'firstPeriod': json['firstPeriod'] == null ? undefined : json['firstPeriod'],
        'lastPeriod': json['lastPeriod'] == null ? undefined : json['lastPeriod'],
        'tags': json['tags'] == null ? undefined : json['tags'],
        'discontinued': json['discontinued'] == null ? undefined : json['discontinued'],
        'contact': json['contact'] == null ? undefined : ((json['contact'] as Array<any>).map(ContactFromJSON)),
    };
}

export function ExtensionRootToJSON(json: any): ExtensionRoot {
    return ExtensionRootToJSONTyped(json, false);
}

export function ExtensionRootToJSONTyped(value?: ExtensionRoot | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'noteMandatory': value['noteMandatory'],
        'px': ExtensionRootPxToJSON(value['px']),
        'firstPeriod': value['firstPeriod'],
        'lastPeriod': value['lastPeriod'],
        'tags': value['tags'],
        'discontinued': value['discontinued'],
        'contact': value['contact'] == null ? undefined : ((value['contact'] as Array<any>).map(ContactToJSON)),
    };
}

