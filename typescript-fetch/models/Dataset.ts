/* tslint:disable */
/* eslint-disable */
/**
 * PxApi
 * This api lets you do 2 things; Find a table(Navigation) and use a table (Table).  _Table below is added to show how tables can be described in yml._  **Table contains status code this API may return** | Status code    | Description      | Reason                      | | -------        | -----------      | ---------------------       | | 200            | Success          | The endpoint has delivered response for the request                      | | 400            | Bad request      | If the request is not valid | | 403            | Forbidden        | number of cells exceed the API limit | | 404            | Not found        | If the URL in request does not exist | | 429            | Too many request | Requests exceed the API time limit. Large queries should be run in sequence | | 50X            | Internal Server Error | The service might be down | 
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Role } from './Role';
import {
    RoleFromJSON,
    RoleFromJSONTyped,
    RoleToJSON,
    RoleToJSONTyped,
} from './Role';
import type { DimensionValue } from './DimensionValue';
import {
    DimensionValueFromJSON,
    DimensionValueFromJSONTyped,
    DimensionValueToJSON,
    DimensionValueToJSONTyped,
} from './DimensionValue';
import type { JsonstatLink } from './JsonstatLink';
import {
    JsonstatLinkFromJSON,
    JsonstatLinkFromJSONTyped,
    JsonstatLinkToJSON,
    JsonstatLinkToJSONTyped,
} from './JsonstatLink';
import type { ClassType } from './ClassType';
import {
    ClassTypeFromJSON,
    ClassTypeFromJSONTyped,
    ClassTypeToJSON,
    ClassTypeToJSONTyped,
} from './ClassType';
import type { ExtensionRoot } from './ExtensionRoot';
import {
    ExtensionRootFromJSON,
    ExtensionRootFromJSONTyped,
    ExtensionRootToJSON,
    ExtensionRootToJSONTyped,
} from './ExtensionRoot';

/**
 * Representation of TableMetaData/TableData according to JSON-stat 2.0 Dataset Schema (2018-09-05 10:55), see full specification of JSON-stat format [here](https://json-stat.org/full/)
 * 
 * Properties in **extension** are mostly from PX-file format, see [PX file format](https://www.scb.se/en/services/statistical-programs-for-px-files/px-file-format/)
 * 
 * @export
 * @interface Dataset
 */
export interface Dataset {
    /**
     * JSON-stat version 2.0
     * @type {string}
     * @memberof Dataset
     */
    version: DatasetVersionEnum;
    /**
     * 
     * @type {ClassType}
     * @memberof Dataset
     */
    _class: ClassType;
    /**
     * Specification on json-stat.org -> [here](https://json-stat.org/full/#href)
     * @type {string}
     * @memberof Dataset
     */
    href?: string;
    /**
     * Specification on json-stat.org -> [here](https://json-stat.org/full/#label)
     * @type {string}
     * @memberof Dataset
     */
    label?: string;
    /**
     * Specification on json-stat.org -> [here](https://json-stat.org/full/#source)
     * @type {string}
     * @memberof Dataset
     */
    source?: string;
    /**
     * See https://json-stat.org/full/#updated
     * @type {string}
     * @memberof Dataset
     */
    updated?: string;
    /**
     * 
     * @type {{ [key: string]: Array<JsonstatLink>; }}
     * @memberof Dataset
     */
    link?: { [key: string]: Array<JsonstatLink>; };
    /**
     * Spesification on json-stat.org -> [here](https://json-stat.org/full/#note)
     * @type {Array<string>}
     * @memberof Dataset
     */
    note?: Array<string>;
    /**
     * 
     * @type {Role}
     * @memberof Dataset
     */
    role?: Role;
    /**
     * 
     * @type {Set<string>}
     * @memberof Dataset
     */
    id: Set<string>;
    /**
     * Specification on json-stat.org -> [here](https://json-stat.org/full/#size)
     * @type {Array<number>}
     * @memberof Dataset
     */
    size: Array<number>;
    /**
     * Specification on json-stat.org -> [here](https://json-stat.org/full/#dimension)
     * @type {{ [key: string]: DimensionValue; }}
     * @memberof Dataset
     */
    dimension: { [key: string]: DimensionValue; };
    /**
     * 
     * @type {ExtensionRoot}
     * @memberof Dataset
     */
    extension?: ExtensionRoot;
    /**
     * Specification on json-stat.org -> [here](https://json-stat.org/full/#value)
     * @type {Array<number | null>}
     * @memberof Dataset
     */
    value: Array<number | null> | null;
    /**
     * Specification on json-stat.org -> [here](https://json-stat.org/full/#status)
     * @type {{ [key: string]: string; }}
     * @memberof Dataset
     */
    status?: { [key: string]: string; };
}


/**
 * @export
 */
export const DatasetVersionEnum = {
    _20: '2.0'
} as const;
export type DatasetVersionEnum = typeof DatasetVersionEnum[keyof typeof DatasetVersionEnum];


/**
 * Check if a given object implements the Dataset interface.
 */
export function instanceOfDataset(value: object): value is Dataset {
    if (!('version' in value) || value['version'] === undefined) return false;
    if (!('_class' in value) || value['_class'] === undefined) return false;
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('size' in value) || value['size'] === undefined) return false;
    if (!('dimension' in value) || value['dimension'] === undefined) return false;
    if (!('value' in value) || value['value'] === undefined) return false;
    return true;
}

export function DatasetFromJSON(json: any): Dataset {
    return DatasetFromJSONTyped(json, false);
}

export function DatasetFromJSONTyped(json: any, ignoreDiscriminator: boolean): Dataset {
    if (json == null) {
        return json;
    }
    return {
        
        'version': json['version'],
        '_class': ClassTypeFromJSON(json['class']),
        'href': json['href'] == null ? undefined : json['href'],
        'label': json['label'] == null ? undefined : json['label'],
        'source': json['source'] == null ? undefined : json['source'],
        'updated': json['updated'] == null ? undefined : json['updated'],
        'link': json['link'] == null ? undefined : json['link'],
        'note': json['note'] == null ? undefined : json['note'],
        'role': json['role'] == null ? undefined : RoleFromJSON(json['role']),
        'id': new Set(json['id']),
        'size': json['size'],
        'dimension': (mapValues(json['dimension'], DimensionValueFromJSON)),
        'extension': json['extension'] == null ? undefined : ExtensionRootFromJSON(json['extension']),
        'value': json['value'] == null ? null : json['value'],
        'status': json['status'] == null ? undefined : json['status'],
    };
}

export function DatasetToJSON(json: any): Dataset {
    return DatasetToJSONTyped(json, false);
}

export function DatasetToJSONTyped(value?: Dataset | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'version': value['version'],
        'class': ClassTypeToJSON(value['_class']),
        'href': value['href'],
        'label': value['label'],
        'source': value['source'],
        'updated': value['updated'],
        'link': value['link'],
        'note': value['note'],
        'role': RoleToJSON(value['role']),
        'id': Array.from(value['id'] as Set<any>),
        'size': value['size'],
        'dimension': (mapValues(value['dimension'], DimensionValueToJSON)),
        'extension': ExtensionRootToJSON(value['extension']),
        'value': value['value'],
        'status': value['status'],
    };
}

