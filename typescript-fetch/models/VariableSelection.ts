/* tslint:disable */
/* eslint-disable */
/**
 * PxApi
 * This api lets you do 2 things; Find a table(Navigation) and use a table (Table).  _Table below is added to show how tables can be described in yml._  **Table contains status code this API may return** | Status code    | Description      | Reason                      | | -------        | -----------      | ---------------------       | | 200            | Success          | The endpoint has delivered response for the request                      | | 400            | Bad request      | If the request is not valid | | 403            | Forbidden        | number of cells exceed the API limit | | 404            | Not found        | If the URL in request does not exist | | 429            | Too many request | Requests exceed the API time limit. Large queries should be run in sequence | | 50X            | Internal Server Error | The service might be down | 
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface VariableSelection
 */
export interface VariableSelection {
    /**
     * The variable code.
     * @type {string}
     * @memberof VariableSelection
     */
    variableCode: string;
    /**
     * The identifier of the codelist that should be applied
     * @type {string}
     * @memberof VariableSelection
     */
    codeList?: string | null;
    /**
     * An array of string that specifies wich values sould be selected. Either as value codes or value expressions
     * @type {Array<string>}
     * @memberof VariableSelection
     */
    valueCodes?: Array<string>;
}

/**
 * Check if a given object implements the VariableSelection interface.
 */
export function instanceOfVariableSelection(value: object): value is VariableSelection {
    if (!('variableCode' in value) || value['variableCode'] === undefined) return false;
    return true;
}

export function VariableSelectionFromJSON(json: any): VariableSelection {
    return VariableSelectionFromJSONTyped(json, false);
}

export function VariableSelectionFromJSONTyped(json: any, ignoreDiscriminator: boolean): VariableSelection {
    if (json == null) {
        return json;
    }
    return {
        
        'variableCode': json['variableCode'],
        'codeList': json['codeList'] == null ? undefined : json['codeList'],
        'valueCodes': json['valueCodes'] == null ? undefined : json['valueCodes'],
    };
}

export function VariableSelectionToJSON(json: any): VariableSelection {
    return VariableSelectionToJSONTyped(json, false);
}

export function VariableSelectionToJSONTyped(value?: VariableSelection | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'variableCode': value['variableCode'],
        'codeList': value['codeList'],
        'valueCodes': value['valueCodes'],
    };
}

