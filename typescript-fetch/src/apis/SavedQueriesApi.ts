/* tslint:disable */
/* eslint-disable */
/**
 * PxApi
 * This api lets you do 2 things; Find a table(Navigation) and use a table (Table).  _Table below is added to show how tables can be described in yml._  **Table contains status code this API may return** | Status code    | Description      | Reason                      | | -------        | -----------      | ---------------------       | | 200            | Success          | The endpoint has delivered response for the request                      | | 400            | Bad request      | If the request is not valid | | 403            | Forbidden        | number of cells exceed the API limit | | 404            | Not found        | If the URL in request does not exist | | 429            | Too many request | Requests exceed the API time limit. Large queries should be run in sequence | | 50X            | Internal Server Error | The service might be down | 
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  OutputFormatParamType,
  OutputFormatType,
  Problem,
  SavedQuery,
} from '../models/index';
import {
    OutputFormatParamTypeFromJSON,
    OutputFormatParamTypeToJSON,
    OutputFormatTypeFromJSON,
    OutputFormatTypeToJSON,
    ProblemFromJSON,
    ProblemToJSON,
    SavedQueryFromJSON,
    SavedQueryToJSON,
} from '../models/index';

export interface CreateSaveQueryRequest {
    savedQuery?: SavedQuery;
}

export interface GetSaveQueryRequest {
    id: string;
}

export interface RunSaveQueryRequest {
    id: string;
    lang?: string | null;
    outputFormat?: OutputFormatType;
    outputFormatParams?: Array<OutputFormatParamType>;
}

/**
 * 
 */
export class SavedQueriesApi extends runtime.BaseAPI {

    /**
     * Save a query for later use.
     */
    async createSaveQueryRaw(requestParameters: CreateSaveQueryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SavedQuery>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/savedqueries`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SavedQueryToJSON(requestParameters['savedQuery']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SavedQueryFromJSON(jsonValue));
    }

    /**
     * Save a query for later use.
     */
    async createSaveQuery(requestParameters: CreateSaveQueryRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SavedQuery> {
        const response = await this.createSaveQueryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves the content of a saved query.
     */
    async getSaveQueryRaw(requestParameters: GetSaveQueryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SavedQuery>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getSaveQuery().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/savedqueries/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SavedQueryFromJSON(jsonValue));
    }

    /**
     * Retrieves the content of a saved query.
     */
    async getSaveQuery(requestParameters: GetSaveQueryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SavedQuery> {
        const response = await this.getSaveQueryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves the data by running the saved query.
     */
    async runSaveQueryRaw(requestParameters: RunSaveQueryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling runSaveQuery().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['lang'] != null) {
            queryParameters['lang'] = requestParameters['lang'];
        }

        if (requestParameters['outputFormat'] != null) {
            queryParameters['outputFormat'] = requestParameters['outputFormat'];
        }

        if (requestParameters['outputFormatParams'] != null) {
            queryParameters['outputFormatParams'] = requestParameters['outputFormatParams'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/savedqueries/{id}/data`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Retrieves the data by running the saved query.
     */
    async runSaveQuery(requestParameters: RunSaveQueryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.runSaveQueryRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
