/* tslint:disable */
/* eslint-disable */
/**
 * PxApi
 * This api lets you do 2 things; Find a table(Navigation) and use a table (Table).  _Table below is added to show how tables can be described in yml._  **Table contains status code this API may return** | Status code    | Description      | Reason                      | | -------        | -----------      | ---------------------       | | 200            | Success          | The endpoint has delivered response for the request                      | | 400            | Bad request      | If the request is not valid | | 403            | Forbidden        | number of cells exceed the API limit | | 404            | Not found        | If the URL in request does not exist | | 429            | Too many request | Requests exceed the API time limit. Large queries should be run in sequence | | 50X            | Internal Server Error | The service might be down | 
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CodeListResponse,
  Dataset,
  OutputFormatParamType,
  OutputFormatType,
  Problem,
  SelectionResponse,
  TableResponse,
  TablesResponse,
  VariablesSelection,
} from '../models/index';
import {
    CodeListResponseFromJSON,
    CodeListResponseToJSON,
    DatasetFromJSON,
    DatasetToJSON,
    OutputFormatParamTypeFromJSON,
    OutputFormatParamTypeToJSON,
    OutputFormatTypeFromJSON,
    OutputFormatTypeToJSON,
    ProblemFromJSON,
    ProblemToJSON,
    SelectionResponseFromJSON,
    SelectionResponseToJSON,
    TableResponseFromJSON,
    TableResponseToJSON,
    TablesResponseFromJSON,
    TablesResponseToJSON,
    VariablesSelectionFromJSON,
    VariablesSelectionToJSON,
} from '../models/index';

export interface GetDefaultSelectionRequest {
    id: string;
    lang?: string | null;
}

export interface GetMetadataByIdRequest {
    id: string;
    lang?: string | null;
    defaultSelection?: boolean;
}

export interface GetTableByIdRequest {
    id: string;
    lang?: string | null;
}

export interface GetTableCodeListByIdRequest {
    id: string;
    lang?: string | null;
}

export interface GetTableDataRequest {
    id: string;
    lang?: string | null;
    valuecodes?: { [key: string]: Array<string>; };
    codelist?: { [key: string]: string; };
    outputFormat?: OutputFormatType;
    outputFormatParams?: Array<OutputFormatParamType>;
    heading?: Array<string>;
    stub?: Array<string>;
}

export interface GetTableDataByPostRequest {
    id: string;
    lang?: string | null;
    outputFormat?: OutputFormatType;
    outputFormatParams?: Array<OutputFormatParamType>;
    variablesSelection?: VariablesSelection;
}

export interface ListAllTablesRequest {
    lang?: string | null;
    query?: string;
    pastDays?: number;
    includeDiscontinued?: boolean;
    pageNumber?: number;
    pageSize?: number;
}

/**
 * 
 */
export class TableApi extends runtime.BaseAPI {

    /**
     * Get information about what is selected for the table by default when no selection is made i the /data endpoint.
     * Get the default selection for Table by {id}.
     */
    async getDefaultSelectionRaw(requestParameters: GetDefaultSelectionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SelectionResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getDefaultSelection().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['lang'] != null) {
            queryParameters['lang'] = requestParameters['lang'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/tables/{id}/defaultselection`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SelectionResponseFromJSON(jsonValue));
    }

    /**
     * Get information about what is selected for the table by default when no selection is made i the /data endpoint.
     * Get the default selection for Table by {id}.
     */
    async getDefaultSelection(requestParameters: GetDefaultSelectionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SelectionResponse> {
        const response = await this.getDefaultSelectionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * **Used for listing detailed information about a specific table** * List all variables and values and all other metadata needed to be able to fetch data  * Also links to where to:   + Fetch   - Where to get information about codelists  * 2 output formats   + Custom json   - JSON-stat2 
     * Get Metadata about Table by {id}.
     */
    async getMetadataByIdRaw(requestParameters: GetMetadataByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Dataset>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getMetadataById().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['lang'] != null) {
            queryParameters['lang'] = requestParameters['lang'];
        }

        if (requestParameters['defaultSelection'] != null) {
            queryParameters['defaultSelection'] = requestParameters['defaultSelection'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/tables/{id}/metadata`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DatasetFromJSON(jsonValue));
    }

    /**
     * **Used for listing detailed information about a specific table** * List all variables and values and all other metadata needed to be able to fetch data  * Also links to where to:   + Fetch   - Where to get information about codelists  * 2 output formats   + Custom json   - JSON-stat2 
     * Get Metadata about Table by {id}.
     */
    async getMetadataById(requestParameters: GetMetadataByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Dataset> {
        const response = await this.getMetadataByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Table by {id}.
     */
    async getTableByIdRaw(requestParameters: GetTableByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TableResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getTableById().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['lang'] != null) {
            queryParameters['lang'] = requestParameters['lang'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/tables/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TableResponseFromJSON(jsonValue));
    }

    /**
     * Get Table by {id}.
     */
    async getTableById(requestParameters: GetTableByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TableResponse> {
        const response = await this.getTableByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Codelist by {id}.
     */
    async getTableCodeListByIdRaw(requestParameters: GetTableCodeListByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CodeListResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getTableCodeListById().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['lang'] != null) {
            queryParameters['lang'] = requestParameters['lang'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/codelists/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CodeListResponseFromJSON(jsonValue));
    }

    /**
     * Get Codelist by {id}.
     */
    async getTableCodeListById(requestParameters: GetTableCodeListByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CodeListResponse> {
        const response = await this.getTableCodeListByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get data from table by {id}.
     */
    async getTableDataRaw(requestParameters: GetTableDataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getTableData().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['lang'] != null) {
            queryParameters['lang'] = requestParameters['lang'];
        }

        if (requestParameters['valuecodes'] != null) {
            queryParameters['valuecodes'] = requestParameters['valuecodes'];
        }

        if (requestParameters['codelist'] != null) {
            queryParameters['codelist'] = requestParameters['codelist'];
        }

        if (requestParameters['outputFormat'] != null) {
            queryParameters['outputFormat'] = requestParameters['outputFormat'];
        }

        if (requestParameters['outputFormatParams'] != null) {
            queryParameters['outputFormatParams'] = requestParameters['outputFormatParams'];
        }

        if (requestParameters['heading'] != null) {
            queryParameters['heading'] = requestParameters['heading']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['stub'] != null) {
            queryParameters['stub'] = requestParameters['stub']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/tables/{id}/data`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Get data from table by {id}.
     */
    async getTableData(requestParameters: GetTableDataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.getTableDataRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get data from table by {id}.
     */
    async getTableDataByPostRaw(requestParameters: GetTableDataByPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getTableDataByPost().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['lang'] != null) {
            queryParameters['lang'] = requestParameters['lang'];
        }

        if (requestParameters['outputFormat'] != null) {
            queryParameters['outputFormat'] = requestParameters['outputFormat'];
        }

        if (requestParameters['outputFormatParams'] != null) {
            queryParameters['outputFormatParams'] = requestParameters['outputFormatParams'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/tables/{id}/data`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: VariablesSelectionToJSON(requestParameters['variablesSelection']),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Get data from table by {id}.
     */
    async getTableDataByPost(requestParameters: GetTableDataByPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.getTableDataByPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all Tables.
     */
    async listAllTablesRaw(requestParameters: ListAllTablesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TablesResponse>> {
        const queryParameters: any = {};

        if (requestParameters['lang'] != null) {
            queryParameters['lang'] = requestParameters['lang'];
        }

        if (requestParameters['query'] != null) {
            queryParameters['query'] = requestParameters['query'];
        }

        if (requestParameters['pastDays'] != null) {
            queryParameters['pastDays'] = requestParameters['pastDays'];
        }

        if (requestParameters['includeDiscontinued'] != null) {
            queryParameters['includeDiscontinued'] = requestParameters['includeDiscontinued'];
        }

        if (requestParameters['pageNumber'] != null) {
            queryParameters['pageNumber'] = requestParameters['pageNumber'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['pageSize'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/tables`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TablesResponseFromJSON(jsonValue));
    }

    /**
     * Get all Tables.
     */
    async listAllTables(requestParameters: ListAllTablesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TablesResponse> {
        const response = await this.listAllTablesRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
