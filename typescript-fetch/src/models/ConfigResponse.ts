/* tslint:disable */
/* eslint-disable */
/**
 * PxApi
 * This api lets you do 2 things; Find a table(Navigation) and use a table (Table).  _Table below is added to show how tables can be described in yml._  **Table contains status code this API may return** | Status code    | Description      | Reason                      | | -------        | -----------      | ---------------------       | | 200            | Success          | The endpoint has delivered response for the request                      | | 400            | Bad request      | If the request is not valid | | 403            | Forbidden        | number of cells exceed the API limit | | 404            | Not found        | If the URL in request does not exist | | 429            | Too many request | Requests exceed the API time limit. Large queries should be run in sequence | | 50X            | Internal Server Error | The service might be down | 
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ApiFeature } from './ApiFeature';
import {
    ApiFeatureFromJSON,
    ApiFeatureFromJSONTyped,
    ApiFeatureToJSON,
    ApiFeatureToJSONTyped,
} from './ApiFeature';
import type { SourceReference } from './SourceReference';
import {
    SourceReferenceFromJSON,
    SourceReferenceFromJSONTyped,
    SourceReferenceToJSON,
    SourceReferenceToJSONTyped,
} from './SourceReference';
import type { Language } from './Language';
import {
    LanguageFromJSON,
    LanguageFromJSONTyped,
    LanguageToJSON,
    LanguageToJSONTyped,
} from './Language';

/**
 * API configuration
 * @export
 * @interface ConfigResponse
 */
export interface ConfigResponse {
    /**
     * The version of the API spesification
     * @type {string}
     * @memberof ConfigResponse
     */
    apiVersion: string;
    /**
     * The version of the API implementation
     * @type {string}
     * @memberof ConfigResponse
     */
    appVersion: string;
    /**
     * A list of language that exists for the data.
     * @type {Array<Language>}
     * @memberof ConfigResponse
     */
    languages: Array<Language>;
    /**
     * The id of the language that is the default language.
     * @type {string}
     * @memberof ConfigResponse
     */
    defaultLanguage: string;
    /**
     * A threshold of how many datacells that can be fetched in a single API call
     * @type {number}
     * @memberof ConfigResponse
     */
    maxDataCells: number;
    /**
     * The maximum number of call to the API for a time window indicated by timeWindow.
     * @type {number}
     * @memberof ConfigResponse
     */
    maxCallsPerTimeWindow: number;
    /**
     * The time window restricting how many call that can be done.
     * @type {number}
     * @memberof ConfigResponse
     */
    timeWindow: number;
    /**
     * The license that the data is provided.
     * @type {string}
     * @memberof ConfigResponse
     */
    license: string;
    /**
     * A list of how the data should be cite for diffrent languages.
     * @type {Array<SourceReference>}
     * @memberof ConfigResponse
     */
    sourceReferences?: Array<SourceReference>;
    /**
     * The default data format to used when no format is specified in the request.
     * @type {string}
     * @memberof ConfigResponse
     */
    defaultDataFormat: string;
    /**
     * List of available data formts for fetching data in.
     * @type {Array<string>}
     * @memberof ConfigResponse
     */
    dataFormats: Array<string>;
    /**
     * A list of features for the API
     * @type {Array<ApiFeature>}
     * @memberof ConfigResponse
     */
    features?: Array<ApiFeature>;
}

/**
 * Check if a given object implements the ConfigResponse interface.
 */
export function instanceOfConfigResponse(value: object): value is ConfigResponse {
    if (!('apiVersion' in value) || value['apiVersion'] === undefined) return false;
    if (!('appVersion' in value) || value['appVersion'] === undefined) return false;
    if (!('languages' in value) || value['languages'] === undefined) return false;
    if (!('defaultLanguage' in value) || value['defaultLanguage'] === undefined) return false;
    if (!('maxDataCells' in value) || value['maxDataCells'] === undefined) return false;
    if (!('maxCallsPerTimeWindow' in value) || value['maxCallsPerTimeWindow'] === undefined) return false;
    if (!('timeWindow' in value) || value['timeWindow'] === undefined) return false;
    if (!('license' in value) || value['license'] === undefined) return false;
    if (!('defaultDataFormat' in value) || value['defaultDataFormat'] === undefined) return false;
    if (!('dataFormats' in value) || value['dataFormats'] === undefined) return false;
    return true;
}

export function ConfigResponseFromJSON(json: any): ConfigResponse {
    return ConfigResponseFromJSONTyped(json, false);
}

export function ConfigResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): ConfigResponse {
    if (json == null) {
        return json;
    }
    return {
        
        'apiVersion': json['apiVersion'],
        'appVersion': json['appVersion'],
        'languages': ((json['languages'] as Array<any>).map(LanguageFromJSON)),
        'defaultLanguage': json['defaultLanguage'],
        'maxDataCells': json['maxDataCells'],
        'maxCallsPerTimeWindow': json['maxCallsPerTimeWindow'],
        'timeWindow': json['timeWindow'],
        'license': json['license'],
        'sourceReferences': json['sourceReferences'] == null ? undefined : ((json['sourceReferences'] as Array<any>).map(SourceReferenceFromJSON)),
        'defaultDataFormat': json['defaultDataFormat'],
        'dataFormats': json['dataFormats'],
        'features': json['features'] == null ? undefined : ((json['features'] as Array<any>).map(ApiFeatureFromJSON)),
    };
}

export function ConfigResponseToJSON(json: any): ConfigResponse {
    return ConfigResponseToJSONTyped(json, false);
}

export function ConfigResponseToJSONTyped(value?: ConfigResponse | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'apiVersion': value['apiVersion'],
        'appVersion': value['appVersion'],
        'languages': ((value['languages'] as Array<any>).map(LanguageToJSON)),
        'defaultLanguage': value['defaultLanguage'],
        'maxDataCells': value['maxDataCells'],
        'maxCallsPerTimeWindow': value['maxCallsPerTimeWindow'],
        'timeWindow': value['timeWindow'],
        'license': value['license'],
        'sourceReferences': value['sourceReferences'] == null ? undefined : ((value['sourceReferences'] as Array<any>).map(SourceReferenceToJSON)),
        'defaultDataFormat': value['defaultDataFormat'],
        'dataFormats': value['dataFormats'],
        'features': value['features'] == null ? undefined : ((value['features'] as Array<any>).map(ApiFeatureToJSON)),
    };
}

