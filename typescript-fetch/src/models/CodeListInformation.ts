/* tslint:disable */
/* eslint-disable */
/**
 * PxApi
 * This api lets you do 2 things; Find a table(Navigation) and use a table (Table).  _Table below is added to show how tables can be described in yml._  **Table contains status code this API may return** | Status code    | Description      | Reason                      | | -------        | -----------      | ---------------------       | | 200            | Success          | The endpoint has delivered response for the request                      | | 400            | Bad request      | If the request is not valid | | 403            | Forbidden        | number of cells exceed the API limit | | 404            | Not found        | If the URL in request does not exist | | 429            | Too many request | Requests exceed the API time limit. Large queries should be run in sequence | | 50X            | Internal Server Error | The service might be down | 
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { CodeListType } from './CodeListType';
import {
    CodeListTypeFromJSON,
    CodeListTypeFromJSONTyped,
    CodeListTypeToJSON,
    CodeListTypeToJSONTyped,
} from './CodeListType';
import type { Link } from './Link';
import {
    LinkFromJSON,
    LinkFromJSONTyped,
    LinkToJSON,
    LinkToJSONTyped,
} from './Link';

/**
 * 
 * @export
 * @interface CodeListInformation
 */
export interface CodeListInformation {
    /**
     * The identity of the CodeList
     * @type {string}
     * @memberof CodeListInformation
     */
    id: string;
    /**
     * A textual name for the CodeList
     * @type {string}
     * @memberof CodeListInformation
     */
    label: string;
    /**
     * 
     * @type {CodeListType}
     * @memberof CodeListInformation
     */
    type: CodeListType;
    /**
     * Links to associated information about the code list
     * @type {Array<Link>}
     * @memberof CodeListInformation
     */
    links: Array<Link>;
}



/**
 * Check if a given object implements the CodeListInformation interface.
 */
export function instanceOfCodeListInformation(value: object): value is CodeListInformation {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('label' in value) || value['label'] === undefined) return false;
    if (!('type' in value) || value['type'] === undefined) return false;
    if (!('links' in value) || value['links'] === undefined) return false;
    return true;
}

export function CodeListInformationFromJSON(json: any): CodeListInformation {
    return CodeListInformationFromJSONTyped(json, false);
}

export function CodeListInformationFromJSONTyped(json: any, ignoreDiscriminator: boolean): CodeListInformation {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'label': json['label'],
        'type': CodeListTypeFromJSON(json['type']),
        'links': ((json['links'] as Array<any>).map(LinkFromJSON)),
    };
}

export function CodeListInformationToJSON(json: any): CodeListInformation {
    return CodeListInformationToJSONTyped(json, false);
}

export function CodeListInformationToJSONTyped(value?: CodeListInformation | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'label': value['label'],
        'type': CodeListTypeToJSON(value['type']),
        'links': ((value['links'] as Array<any>).map(LinkToJSON)),
    };
}

