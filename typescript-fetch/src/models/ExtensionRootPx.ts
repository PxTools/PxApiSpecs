/* tslint:disable */
/* eslint-disable */
/**
 * PxApi
 * This api lets you do 2 things; Find a table(Navigation) and use a table (Table).  _Table below is added to show how tables can be described in yml._  **Table contains status code this API may return** | Status code    | Description      | Reason                      | | -------        | -----------      | ---------------------       | | 200            | Success          | The endpoint has delivered response for the request                      | | 400            | Bad request      | If the request is not valid | | 403            | Forbidden        | number of cells exceed the API limit | | 404            | Not found        | If the URL in request does not exist | | 429            | Too many request | Requests exceed the API time limit. Large queries should be run in sequence | | 50X            | Internal Server Error | The service might be down | 
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * Properties corresponds to keywords in the px-file.
 * 
 * See [PX file format](https://www.scb.se/en/services/statistical-programs-for-px-files/px-file-format/)
 * 
 * @export
 * @interface ExtensionRootPx
 */
export interface ExtensionRootPx {
    /**
     * Name of a file containing more information for the statistics**
     * @type {string}
     * @memberof ExtensionRootPx
     */
    infofile?: string;
    /**
     * A text that is the identity of the table
     * @type {string}
     * @memberof ExtensionRootPx
     */
    tableid?: string;
    /**
     * The number of decimals in the table cells
     * @type {number}
     * @memberof ExtensionRootPx
     */
    decimals?: number;
    /**
     * Indicates if the data table is included in the official statistics of the organization
     * @type {boolean}
     * @memberof ExtensionRootPx
     */
    officialStatistics?: boolean;
    /**
     * If the contents of the table cannot be aggregated
     * @type {boolean}
     * @memberof ExtensionRootPx
     */
    aggregallowed?: boolean;
    /**
     * If the table is protected by copyright
     * @type {boolean}
     * @memberof ExtensionRootPx
     */
    copyright?: boolean;
    /**
     * code (two characters) for language
     * @type {string}
     * @memberof ExtensionRootPx
     */
    language?: string;
    /**
     * Information about the contents, which makes up the first part of a title created when retrieving tables from PC-Axis.
     * @type {string}
     * @memberof ExtensionRootPx
     */
    contents?: string;
    /**
     * See _description_ in [PX file format](https://www.scb.se/en/services/statistical-programs-for-px-files/px-file-format/)
     * @type {string}
     * @memberof ExtensionRootPx
     */
    description?: string;
    /**
     * For some languages it is difficult to build a table title dynamically. The keyword descriptiondefault = True; means that the text after keyword Description will be used as title for the table
     * @type {boolean}
     * @memberof ExtensionRootPx
     */
    descriptiondefault?: boolean;
    /**
     * List of suggested variables for table head
     * @type {Array<string>}
     * @memberof ExtensionRootPx
     */
    heading?: Array<string>;
    /**
     * List of suggested variables for table stub
     * @type {Array<string>}
     * @memberof ExtensionRootPx
     */
    stub?: Array<string>;
    /**
     * The name of the matrix
     * @type {string}
     * @memberof ExtensionRootPx
     */
    matrix?: string;
    /**
     * Subject area code
     * @type {string}
     * @memberof ExtensionRootPx
     */
    subjectCode?: string;
    /**
     * Subject area
     * @type {string}
     * @memberof ExtensionRootPx
     */
    subjectArea?: string;
    /**
     * See https://json-stat.org/full/#updated
     * @type {string}
     * @memberof ExtensionRootPx
     */
    nextUpdate?: string;
    /**
     * Survey for table
     * @type {string}
     * @memberof ExtensionRootPx
     */
    survey?: string;
    /**
     * Links for tables
     * @type {string}
     * @memberof ExtensionRootPx
     */
    link?: string;
    /**
     * How often a table is updated
     * @type {string}
     * @memberof ExtensionRootPx
     */
    updateFrequency?: string;
}

/**
 * Check if a given object implements the ExtensionRootPx interface.
 */
export function instanceOfExtensionRootPx(value: object): value is ExtensionRootPx {
    return true;
}

export function ExtensionRootPxFromJSON(json: any): ExtensionRootPx {
    return ExtensionRootPxFromJSONTyped(json, false);
}

export function ExtensionRootPxFromJSONTyped(json: any, ignoreDiscriminator: boolean): ExtensionRootPx {
    if (json == null) {
        return json;
    }
    return {
        
        'infofile': json['infofile'] == null ? undefined : json['infofile'],
        'tableid': json['tableid'] == null ? undefined : json['tableid'],
        'decimals': json['decimals'] == null ? undefined : json['decimals'],
        'officialStatistics': json['official-statistics'] == null ? undefined : json['official-statistics'],
        'aggregallowed': json['aggregallowed'] == null ? undefined : json['aggregallowed'],
        'copyright': json['copyright'] == null ? undefined : json['copyright'],
        'language': json['language'] == null ? undefined : json['language'],
        'contents': json['contents'] == null ? undefined : json['contents'],
        'description': json['description'] == null ? undefined : json['description'],
        'descriptiondefault': json['descriptiondefault'] == null ? undefined : json['descriptiondefault'],
        'heading': json['heading'] == null ? undefined : json['heading'],
        'stub': json['stub'] == null ? undefined : json['stub'],
        'matrix': json['matrix'] == null ? undefined : json['matrix'],
        'subjectCode': json['subject-code'] == null ? undefined : json['subject-code'],
        'subjectArea': json['subject-area'] == null ? undefined : json['subject-area'],
        'nextUpdate': json['nextUpdate'] == null ? undefined : json['nextUpdate'],
        'survey': json['survey'] == null ? undefined : json['survey'],
        'link': json['link'] == null ? undefined : json['link'],
        'updateFrequency': json['updateFrequency'] == null ? undefined : json['updateFrequency'],
    };
}

export function ExtensionRootPxToJSON(json: any): ExtensionRootPx {
    return ExtensionRootPxToJSONTyped(json, false);
}

export function ExtensionRootPxToJSONTyped(value?: ExtensionRootPx | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'infofile': value['infofile'],
        'tableid': value['tableid'],
        'decimals': value['decimals'],
        'official-statistics': value['officialStatistics'],
        'aggregallowed': value['aggregallowed'],
        'copyright': value['copyright'],
        'language': value['language'],
        'contents': value['contents'],
        'description': value['description'],
        'descriptiondefault': value['descriptiondefault'],
        'heading': value['heading'],
        'stub': value['stub'],
        'matrix': value['matrix'],
        'subject-code': value['subjectCode'],
        'subject-area': value['subjectArea'],
        'nextUpdate': value['nextUpdate'],
        'survey': value['survey'],
        'link': value['link'],
        'updateFrequency': value['updateFrequency'],
    };
}

