/* tslint:disable */
/* eslint-disable */
/**
 * PxApi
 * This api lets you do 2 things; Find a table(Navigation) and use a table (Table).  _Table below is added to show how tables can be described in yml._  **Table contains status code this API may return** | Status code    | Description      | Reason                      | | -------        | -----------      | ---------------------       | | 200            | Success          | The endpoint has delivered response for the request                      | | 400            | Bad request      | If the request is not valid | | 403            | Forbidden        | number of cells exceed the API limit | | 404            | Not found        | If the URL in request does not exist | | 429            | Too many request | Requests exceed the API time limit. Large queries should be run in sequence | | 50X            | Internal Server Error | The service might be down | 
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { FolderContentItemTypeEnum } from './FolderContentItemTypeEnum';
import {
    FolderContentItemTypeEnumFromJSON,
    FolderContentItemTypeEnumFromJSONTyped,
    FolderContentItemTypeEnumToJSON,
    FolderContentItemTypeEnumToJSONTyped,
} from './FolderContentItemTypeEnum';

import { FolderInformation, FolderInformationFromJSONTyped, FolderInformationToJSON, FolderInformationToJSONTyped } from './FolderInformation';
import { Heading, HeadingFromJSONTyped, HeadingToJSON, HeadingToJSONTyped } from './Heading';
import { Table, TableFromJSONTyped, TableToJSON, TableToJSONTyped } from './Table';
/**
 * Navigation item.
 * @export
 * @interface FolderContentItem
 */
export interface FolderContentItem {
    /**
     * 
     * @type {FolderContentItemTypeEnum}
     * @memberof FolderContentItem
     */
    type: FolderContentItemTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof FolderContentItem
     */
    id: string;
    /**
     * Display text
     * @type {string}
     * @memberof FolderContentItem
     */
    label: string | null;
    /**
     * Longer text describing node.
     * @type {string}
     * @memberof FolderContentItem
     */
    description?: string | null;
    /**
     * String for sorting the contents in folder
     * @type {string}
     * @memberof FolderContentItem
     */
    sortCode?: string;
}



/**
 * Check if a given object implements the FolderContentItem interface.
 */
export function instanceOfFolderContentItem(value: object): value is FolderContentItem {
    if (!('type' in value) || value['type'] === undefined) return false;
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('label' in value) || value['label'] === undefined) return false;
    return true;
}

export function FolderContentItemFromJSON(json: any): FolderContentItem {
    return FolderContentItemFromJSONTyped(json, false);
}

export function FolderContentItemFromJSONTyped(json: any, ignoreDiscriminator: boolean): FolderContentItem {
    if (json == null) {
        return json;
    }
    if (!ignoreDiscriminator) {
        if (json['objectType'] === 'FolderInformation') {
            return FolderInformationFromJSONTyped(json, ignoreDiscriminator);
        }
        if (json['objectType'] === 'Heading') {
            return HeadingFromJSONTyped(json, ignoreDiscriminator);
        }
        if (json['objectType'] === 'Table') {
            return TableFromJSONTyped(json, ignoreDiscriminator);
        }
    }
    return {
        
        'type': FolderContentItemTypeEnumFromJSON(json['type']),
        'id': json['id'],
        'label': json['label'],
        'description': json['description'] == null ? undefined : json['description'],
        'sortCode': json['sortCode'] == null ? undefined : json['sortCode'],
    };
}

export function FolderContentItemToJSON(json: any): FolderContentItem {
    return FolderContentItemToJSONTyped(json, false);
}

export function FolderContentItemToJSONTyped(value?: FolderContentItem | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    if (!ignoreDiscriminator) {
        switch (value['objectType']) {
            case 'FolderInformation':
                return FolderInformationToJSONTyped(value as FolderInformation, ignoreDiscriminator);
            case 'Heading':
                return HeadingToJSONTyped(value as Heading, ignoreDiscriminator);
            case 'Table':
                return TableToJSONTyped(value as Table, ignoreDiscriminator);
            default:
                throw new Error(`No variant of FolderContentItem exists with 'objectType=${value['objectType']}'`);
        }
    }

    return {
        
        'type': FolderContentItemTypeEnumToJSON(value['type']),
        'id': value['id'],
        'label': value['label'],
        'description': value['description'],
        'sortCode': value['sortCode'],
    };
}

