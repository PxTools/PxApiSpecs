/* tslint:disable */
/* eslint-disable */
/**
 * PxApi
 * This api lets you do 2 things; Find a table(Navigation) and use a table (Table).  _Table below is added to show how tables can be described in yml._  **Table contains status code this API may return** | Status code    | Description      | Reason                      | | -------        | -----------      | ---------------------       | | 200            | Success          | The endpoint has delivered response for the request                      | | 400            | Bad request      | If the request is not valid | | 403            | Forbidden        | number of cells exceed the API limit | | 404            | Not found        | If the URL in request does not exist | | 429            | Too many request | Requests exceed the API time limit. Large queries should be run in sequence | | 50X            | Internal Server Error | The service might be down | 
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface Note
 */
export interface Note {
    /**
     * Must be shown to end user if true
     * @type {boolean}
     * @memberof Note
     */
    mandatory?: boolean;
    /**
     * 
     * @type {string}
     * @memberof Note
     */
    text: string;
}

/**
 * Check if a given object implements the Note interface.
 */
export function instanceOfNote(value: object): value is Note {
    if (!('text' in value) || value['text'] === undefined) return false;
    return true;
}

export function NoteFromJSON(json: any): Note {
    return NoteFromJSONTyped(json, false);
}

export function NoteFromJSONTyped(json: any, ignoreDiscriminator: boolean): Note {
    if (json == null) {
        return json;
    }
    return {
        
        'mandatory': json['mandatory'] == null ? undefined : json['mandatory'],
        'text': json['text'],
    };
}

export function NoteToJSON(json: any): Note {
    return NoteToJSONTyped(json, false);
}

export function NoteToJSONTyped(value?: Note | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'mandatory': value['mandatory'],
        'text': value['text'],
    };
}

