/* tslint:disable */
/* eslint-disable */
/**
 * PxApi
 * This api lets you do 2 things; Find a table(Navigation) and use a table (Table).  _Table below is added to show how tables can be described in yml._  **Table contains status code this API may return** | Status code    | Description      | Reason                      | | -------        | -----------      | ---------------------       | | 200            | Success          | The endpoint has delivered response for the request                      | | 400            | Bad request      | If the request is not valid | | 403            | Forbidden        | number of cells exceed the API limit | | 404            | Not found        | If the URL in request does not exist | | 429            | Too many request | Requests exceed the API time limit. Large queries should be run in sequence | | 50X            | Internal Server Error | The service might be down | 
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { FolderContentItemTypeEnum } from './FolderContentItemTypeEnum';
import {
    FolderContentItemTypeEnumFromJSON,
    FolderContentItemTypeEnumFromJSONTyped,
    FolderContentItemTypeEnumToJSON,
    FolderContentItemTypeEnumToJSONTyped,
} from './FolderContentItemTypeEnum';
import type { PathElement } from './PathElement';
import {
    PathElementFromJSON,
    PathElementFromJSONTyped,
    PathElementToJSON,
    PathElementToJSONTyped,
} from './PathElement';
import type { TimeUnit } from './TimeUnit';
import {
    TimeUnitFromJSON,
    TimeUnitFromJSONTyped,
    TimeUnitToJSON,
    TimeUnitToJSONTyped,
} from './TimeUnit';
import type { FolderContentItem } from './FolderContentItem';
import {
    FolderContentItemFromJSON,
    FolderContentItemFromJSONTyped,
    FolderContentItemToJSON,
    FolderContentItemToJSONTyped,
} from './FolderContentItem';
import type { Link } from './Link';
import {
    LinkFromJSON,
    LinkFromJSONTyped,
    LinkToJSON,
    LinkToJSONTyped,
} from './Link';

/**
 * Table item
 * @export
 * @interface Table
 */
export interface Table extends FolderContentItem {
    /**
     * 
     * @type {Array<string>}
     * @memberof Table
     */
    tags?: Array<string>;
    /**
     * Date and time when the figures in the table was last updated, in UTC time.
     * @type {Date}
     * @memberof Table
     */
    updated: Date | null;
    /**
     * First period
     * @type {string}
     * @memberof Table
     */
    firstPeriod: string | null;
    /**
     * Last period
     * @type {string}
     * @memberof Table
     */
    lastPeriod: string | null;
    /**
     * Mostly for internal use. Which category table belongs to. internal, public, private or section.
     * @type {string}
     * @memberof Table
     */
    category?: TableCategoryEnum;
    /**
     * List of varibles name
     * @type {Array<string>}
     * @memberof Table
     */
    variableNames: Array<string>;
    /**
     * If the table is discontinued or not. That is if it no longer updated with new figures.
     * @type {boolean}
     * @memberof Table
     */
    discontinued?: boolean | null;
    /**
     * The source of the table
     * @type {string}
     * @memberof Table
     */
    source?: string;
    /**
     * 
     * @type {TimeUnit}
     * @memberof Table
     */
    timeUnit?: TimeUnit;
    /**
     * The path to the table
     * @type {Array<Array<PathElement>>}
     * @memberof Table
     */
    paths?: Array<Array<PathElement>>;
    /**
     * Links to ...
     * @type {Array<Link>}
     * @memberof Table
     */
    links: Array<Link> | null;
}


/**
 * @export
 */
export const TableCategoryEnum = {
    Internal: 'internal',
    Public: 'public',
    Private: 'private',
    Section: 'section'
} as const;
export type TableCategoryEnum = typeof TableCategoryEnum[keyof typeof TableCategoryEnum];


/**
 * Check if a given object implements the Table interface.
 */
export function instanceOfTable(value: object): value is Table {
    if (!('updated' in value) || value['updated'] === undefined) return false;
    if (!('firstPeriod' in value) || value['firstPeriod'] === undefined) return false;
    if (!('lastPeriod' in value) || value['lastPeriod'] === undefined) return false;
    if (!('variableNames' in value) || value['variableNames'] === undefined) return false;
    if (!('links' in value) || value['links'] === undefined) return false;
    return true;
}

export function TableFromJSON(json: any): Table {
    return TableFromJSONTyped(json, false);
}

export function TableFromJSONTyped(json: any, ignoreDiscriminator: boolean): Table {
    if (json == null) {
        return json;
    }
    return {
        ...FolderContentItemFromJSONTyped(json, true),
        'tags': json['tags'] == null ? undefined : json['tags'],
        'updated': (json['updated'] == null ? null : new Date(json['updated'])),
        'firstPeriod': json['firstPeriod'],
        'lastPeriod': json['lastPeriod'],
        'category': json['category'] == null ? undefined : json['category'],
        'variableNames': json['variableNames'],
        'discontinued': json['discontinued'] == null ? undefined : json['discontinued'],
        'source': json['source'] == null ? undefined : json['source'],
        'timeUnit': json['timeUnit'] == null ? undefined : TimeUnitFromJSON(json['timeUnit']),
        'paths': json['paths'] == null ? undefined : json['paths'],
        'links': (json['links'] == null ? null : (json['links'] as Array<any>).map(LinkFromJSON)),
    };
}

export function TableToJSON(json: any): Table {
    return TableToJSONTyped(json, false);
}

export function TableToJSONTyped(value?: Table | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        ...FolderContentItemToJSONTyped(value, true),
        'tags': value['tags'],
        'updated': (value['updated'] == null ? null : (value['updated'] as any).toISOString()),
        'firstPeriod': value['firstPeriod'],
        'lastPeriod': value['lastPeriod'],
        'category': value['category'],
        'variableNames': value['variableNames'],
        'discontinued': value['discontinued'],
        'source': value['source'],
        'timeUnit': TimeUnitToJSON(value['timeUnit']),
        'paths': value['paths'],
        'links': (value['links'] == null ? null : (value['links'] as Array<any>).map(LinkToJSON)),
    };
}

