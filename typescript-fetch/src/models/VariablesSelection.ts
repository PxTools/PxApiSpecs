/* tslint:disable */
/* eslint-disable */
/**
 * PxApi
 * This api lets you do 2 things; Find a table(Navigation) and use a table (Table).  _Table below is added to show how tables can be described in yml._  **Table contains status code this API may return** | Status code    | Description      | Reason                      | | -------        | -----------      | ---------------------       | | 200            | Success          | The endpoint has delivered response for the request                      | | 400            | Bad request      | If the request is not valid | | 403            | Forbidden        | number of cells exceed the API limit | | 404            | Not found        | If the URL in request does not exist | | 429            | Too many request | Requests exceed the API time limit. Large queries should be run in sequence | | 50X            | Internal Server Error | The service might be down | 
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { VariablePlacementType } from './VariablePlacementType';
import {
    VariablePlacementTypeFromJSON,
    VariablePlacementTypeFromJSONTyped,
    VariablePlacementTypeToJSON,
    VariablePlacementTypeToJSONTyped,
} from './VariablePlacementType';
import type { VariableSelection } from './VariableSelection';
import {
    VariableSelectionFromJSON,
    VariableSelectionFromJSONTyped,
    VariableSelectionToJSON,
    VariableSelectionToJSONTyped,
} from './VariableSelection';

/**
 * 
 * @export
 * @interface VariablesSelection
 */
export interface VariablesSelection {
    /**
     * 
     * @type {Array<VariableSelection>}
     * @memberof VariablesSelection
     */
    selection: Array<VariableSelection>;
    /**
     * 
     * @type {VariablePlacementType}
     * @memberof VariablesSelection
     */
    placement?: VariablePlacementType;
}

/**
 * Check if a given object implements the VariablesSelection interface.
 */
export function instanceOfVariablesSelection(value: object): value is VariablesSelection {
    if (!('selection' in value) || value['selection'] === undefined) return false;
    return true;
}

export function VariablesSelectionFromJSON(json: any): VariablesSelection {
    return VariablesSelectionFromJSONTyped(json, false);
}

export function VariablesSelectionFromJSONTyped(json: any, ignoreDiscriminator: boolean): VariablesSelection {
    if (json == null) {
        return json;
    }
    return {
        
        'selection': ((json['selection'] as Array<any>).map(VariableSelectionFromJSON)),
        'placement': json['placement'] == null ? undefined : VariablePlacementTypeFromJSON(json['placement']),
    };
}

export function VariablesSelectionToJSON(json: any): VariablesSelection {
    return VariablesSelectionToJSONTyped(json, false);
}

export function VariablesSelectionToJSONTyped(value?: VariablesSelection | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'selection': ((value['selection'] as Array<any>).map(VariableSelectionToJSON)),
        'placement': VariablePlacementTypeToJSON(value['placement']),
    };
}

