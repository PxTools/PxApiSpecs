/* tslint:disable */
/* eslint-disable */
/**
 * PxApi
 * This api lets you do 2 things; Find a table(Navigation) and use a table (Table).  _Table below is added to show how tables can be described in yml._  **Table contains status code this API may return** | Status code    | Description      | Reason                      | | -------        | -----------      | ---------------------       | | 200            | Success          | The endpoint has delivered response for the request                      | | 400            | Bad request      | If the request is not valid | | 403            | Forbidden        | number of cells exceed the API limit | | 404            | Not found        | If the URL in request does not exist | | 429            | Too many request | Requests exceed the API time limit. Large queries should be run in sequence | | 50X            | Internal Server Error | The service might be down | 
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { JsonstatExtensionLink } from './JsonstatExtensionLink';
import {
    JsonstatExtensionLinkFromJSON,
    JsonstatExtensionLinkFromJSONTyped,
    JsonstatExtensionLinkToJSON,
    JsonstatExtensionLinkToJSONTyped,
} from './JsonstatExtensionLink';
import type { ExtensionDimension } from './ExtensionDimension';
import {
    ExtensionDimensionFromJSON,
    ExtensionDimensionFromJSONTyped,
    ExtensionDimensionToJSON,
    ExtensionDimensionToJSONTyped,
} from './ExtensionDimension';
import type { JsonstatCategory } from './JsonstatCategory';
import {
    JsonstatCategoryFromJSON,
    JsonstatCategoryFromJSONTyped,
    JsonstatCategoryToJSON,
    JsonstatCategoryToJSONTyped,
} from './JsonstatCategory';

/**
 * 
 * @export
 * @interface DimensionValue
 */
export interface DimensionValue {
    /**
     * Specification on json-stat.org -> [here](https://json-stat.org/full/#label)
     * @type {string}
     * @memberof DimensionValue
     */
    label?: string;
    /**
     * Spesification on json-stat.org -> [here](https://json-stat.org/full/#note)
     * @type {Array<string>}
     * @memberof DimensionValue
     */
    note?: Array<string>;
    /**
     * 
     * @type {JsonstatCategory}
     * @memberof DimensionValue
     */
    category?: JsonstatCategory;
    /**
     * 
     * @type {ExtensionDimension}
     * @memberof DimensionValue
     */
    extension?: ExtensionDimension;
    /**
     * 
     * @type {JsonstatExtensionLink}
     * @memberof DimensionValue
     */
    link?: JsonstatExtensionLink;
}

/**
 * Check if a given object implements the DimensionValue interface.
 */
export function instanceOfDimensionValue(value: object): value is DimensionValue {
    return true;
}

export function DimensionValueFromJSON(json: any): DimensionValue {
    return DimensionValueFromJSONTyped(json, false);
}

export function DimensionValueFromJSONTyped(json: any, ignoreDiscriminator: boolean): DimensionValue {
    if (json == null) {
        return json;
    }
    return {
        
        'label': json['label'] == null ? undefined : json['label'],
        'note': json['note'] == null ? undefined : json['note'],
        'category': json['category'] == null ? undefined : JsonstatCategoryFromJSON(json['category']),
        'extension': json['extension'] == null ? undefined : ExtensionDimensionFromJSON(json['extension']),
        'link': json['link'] == null ? undefined : JsonstatExtensionLinkFromJSON(json['link']),
    };
}

export function DimensionValueToJSON(json: any): DimensionValue {
    return DimensionValueToJSONTyped(json, false);
}

export function DimensionValueToJSONTyped(value?: DimensionValue | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'label': value['label'],
        'note': value['note'],
        'category': JsonstatCategoryToJSON(value['category']),
        'extension': ExtensionDimensionToJSON(value['extension']),
        'link': JsonstatExtensionLinkToJSON(value['link']),
    };
}

