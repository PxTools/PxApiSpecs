/* tslint:disable */
/* eslint-disable */
/**
 * PxApi
 * This api lets you do 2 things; Find a table(Navigation) and use a table (Table).  _Table below is added to show how tables can be described in yml._  **Table contains status code this API may return** | Status code    | Description      | Reason                      | | -------        | -----------      | ---------------------       | | 200            | Success          | The endpoint has delivered response for the request                      | | 400            | Bad request      | If the request is not valid | | 403            | Forbidden        | number of cells exceed the API limit | | 404            | Not found        | If the URL in request does not exist | | 429            | Too many request | Requests exceed the API time limit. Large queries should be run in sequence | | 50X            | Internal Server Error | The service might be down | 
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface Link
 */
export interface Link {
    /**
     * the link relation, see https://www.iana.org/assignments/link-relations/link-relations.xhtml
     * @type {string}
     * @memberof Link
     */
    rel: string;
    /**
     * The language that is used for the link, see https://moz.com/learn/seo/hreflang-tag
     * @type {string}
     * @memberof Link
     */
    hreflang: string;
    /**
     * the link to the resource
     * @type {string}
     * @memberof Link
     */
    href: string;
}

/**
 * Check if a given object implements the Link interface.
 */
export function instanceOfLink(value: object): value is Link {
    if (!('rel' in value) || value['rel'] === undefined) return false;
    if (!('hreflang' in value) || value['hreflang'] === undefined) return false;
    if (!('href' in value) || value['href'] === undefined) return false;
    return true;
}

export function LinkFromJSON(json: any): Link {
    return LinkFromJSONTyped(json, false);
}

export function LinkFromJSONTyped(json: any, ignoreDiscriminator: boolean): Link {
    if (json == null) {
        return json;
    }
    return {
        
        'rel': json['rel'],
        'hreflang': json['hreflang'],
        'href': json['href'],
    };
}

export function LinkToJSON(json: any): Link {
    return LinkToJSONTyped(json, false);
}

export function LinkToJSONTyped(value?: Link | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'rel': value['rel'],
        'hreflang': value['hreflang'],
        'href': value['href'],
    };
}

