/* tslint:disable */
/* eslint-disable */
/**
 * PxApi
 * This api lets you do 2 things; Find a table(Navigation) and use a table (Table).  _Table below is added to show how tables can be described in yml._  **Table contains status code this API may return** | Status code    | Description      | Reason                      | | -------        | -----------      | ---------------------       | | 200            | Success          | The endpoint has delivered response for the request                      | | 400            | Bad request      | If the request is not valid | | 403            | Forbidden        | number of cells exceed the API limit | | 404            | Not found        | If the URL in request does not exist | | 429            | Too many request | Requests exceed the API time limit. Large queries should be run in sequence | | 50X            | Internal Server Error | The service might be down | 
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { FolderContentItem } from './FolderContentItem';
import {
    FolderContentItemFromJSON,
    FolderContentItemFromJSONTyped,
    FolderContentItemToJSON,
    FolderContentItemToJSONTyped,
} from './FolderContentItem';
import type { Link } from './Link';
import {
    LinkFromJSON,
    LinkFromJSONTyped,
    LinkToJSON,
    LinkToJSONTyped,
} from './Link';

/**
 * Folder item
 * @export
 * @interface FolderResponse
 */
export interface FolderResponse {
    /**
     * The language code (ISO 639) for this response
     * @type {string}
     * @memberof FolderResponse
     */
    language: string;
    /**
     * 
     * @type {string}
     * @memberof FolderResponse
     */
    id: string | null;
    /**
     * Display text
     * @type {string}
     * @memberof FolderResponse
     */
    label: string | null;
    /**
     * Longer text describing node.
     * @type {string}
     * @memberof FolderResponse
     */
    description?: string | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof FolderResponse
     */
    tags?: Array<string>;
    /**
     * 
     * @type {Array<FolderContentItem>}
     * @memberof FolderResponse
     */
    folderContents: Array<FolderContentItem> | null;
    /**
     * Links to ...
     * @type {Array<Link>}
     * @memberof FolderResponse
     */
    links: Array<Link> | null;
}

/**
 * Check if a given object implements the FolderResponse interface.
 */
export function instanceOfFolderResponse(value: object): value is FolderResponse {
    if (!('language' in value) || value['language'] === undefined) return false;
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('label' in value) || value['label'] === undefined) return false;
    if (!('folderContents' in value) || value['folderContents'] === undefined) return false;
    if (!('links' in value) || value['links'] === undefined) return false;
    return true;
}

export function FolderResponseFromJSON(json: any): FolderResponse {
    return FolderResponseFromJSONTyped(json, false);
}

export function FolderResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): FolderResponse {
    if (json == null) {
        return json;
    }
    return {
        
        'language': json['language'],
        'id': json['id'],
        'label': json['label'],
        'description': json['description'] == null ? undefined : json['description'],
        'tags': json['tags'] == null ? undefined : json['tags'],
        'folderContents': (json['folderContents'] == null ? null : (json['folderContents'] as Array<any>).map(FolderContentItemFromJSON)),
        'links': (json['links'] == null ? null : (json['links'] as Array<any>).map(LinkFromJSON)),
    };
}

export function FolderResponseToJSON(json: any): FolderResponse {
    return FolderResponseToJSONTyped(json, false);
}

export function FolderResponseToJSONTyped(value?: FolderResponse | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'language': value['language'],
        'id': value['id'],
        'label': value['label'],
        'description': value['description'],
        'tags': value['tags'],
        'folderContents': (value['folderContents'] == null ? null : (value['folderContents'] as Array<any>).map(FolderContentItemToJSON)),
        'links': (value['links'] == null ? null : (value['links'] as Array<any>).map(LinkToJSON)),
    };
}

