/* tslint:disable */
/* eslint-disable */
/**
 * PxApi
 * This api lets you do 2 things; Find a table(Navigation) and use a table (Table).  _Table below is added to show how tables can be described in yml._  **Table contains status code this API may return** | Status code    | Description      | Reason                      | | -------        | -----------      | ---------------------       | | 200            | Success          | The endpoint has delivered response for the request                      | | 400            | Bad request      | If the request is not valid | | 403            | Forbidden        | number of cells exceed the API limit | | 404            | Not found        | If the URL in request does not exist | | 429            | Too many request | Requests exceed the API time limit. Large queries should be run in sequence | | 50X            | Internal Server Error | The service might be down | 
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { PageInfo } from './PageInfo';
import {
    PageInfoFromJSON,
    PageInfoFromJSONTyped,
    PageInfoToJSON,
    PageInfoToJSONTyped,
} from './PageInfo';
import type { Table } from './Table';
import {
    TableFromJSON,
    TableFromJSONTyped,
    TableToJSON,
    TableToJSONTyped,
} from './Table';
import type { Link } from './Link';
import {
    LinkFromJSON,
    LinkFromJSONTyped,
    LinkToJSON,
    LinkToJSONTyped,
} from './Link';

/**
 * 
 * @export
 * @interface TablesResponse
 */
export interface TablesResponse {
    /**
     * The language code (ISO 639) for this response
     * @type {string}
     * @memberof TablesResponse
     */
    language: string;
    /**
     * 
     * @type {Array<Table>}
     * @memberof TablesResponse
     */
    tables: Array<Table>;
    /**
     * 
     * @type {PageInfo}
     * @memberof TablesResponse
     */
    page: PageInfo;
    /**
     * 
     * @type {Array<Link>}
     * @memberof TablesResponse
     */
    links?: Array<Link>;
}

/**
 * Check if a given object implements the TablesResponse interface.
 */
export function instanceOfTablesResponse(value: object): value is TablesResponse {
    if (!('language' in value) || value['language'] === undefined) return false;
    if (!('tables' in value) || value['tables'] === undefined) return false;
    if (!('page' in value) || value['page'] === undefined) return false;
    return true;
}

export function TablesResponseFromJSON(json: any): TablesResponse {
    return TablesResponseFromJSONTyped(json, false);
}

export function TablesResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): TablesResponse {
    if (json == null) {
        return json;
    }
    return {
        
        'language': json['language'],
        'tables': ((json['tables'] as Array<any>).map(TableFromJSON)),
        'page': PageInfoFromJSON(json['page']),
        'links': json['links'] == null ? undefined : ((json['links'] as Array<any>).map(LinkFromJSON)),
    };
}

export function TablesResponseToJSON(json: any): TablesResponse {
    return TablesResponseToJSONTyped(json, false);
}

export function TablesResponseToJSONTyped(value?: TablesResponse | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'language': value['language'],
        'tables': ((value['tables'] as Array<any>).map(TableToJSON)),
        'page': PageInfoToJSON(value['page']),
        'links': value['links'] == null ? undefined : ((value['links'] as Array<any>).map(LinkToJSON)),
    };
}

