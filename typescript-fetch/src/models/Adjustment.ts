/* tslint:disable */
/* eslint-disable */
/**
 * PxApi
 * This api lets you do 2 things; Find a table(Navigation) and use a table (Table).  _Table below is added to show how tables can be described in yml._  **Table contains status code this API may return** | Status code    | Description      | Reason                      | | -------        | -----------      | ---------------------       | | 200            | Success          | The endpoint has delivered response for the request                      | | 400            | Bad request      | If the request is not valid | | 403            | Forbidden        | number of cells exceed the API limit | | 404            | Not found        | If the URL in request does not exist | | 429            | Too many request | Requests exceed the API time limit. Large queries should be run in sequence | | 50X            | Internal Server Error | The service might be down | 
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


/**
 * WorkOnly means that data is adjusted e.g. to take into account the number of working days. SesOnly means that data is seasonally adjusted.
 * @export
 */
export const Adjustment = {
    None: 'None',
    SesOnly: 'SesOnly',
    WorkOnly: 'WorkOnly',
    WorkAndSes: 'WorkAndSes'
} as const;
export type Adjustment = typeof Adjustment[keyof typeof Adjustment];


export function instanceOfAdjustment(value: any): boolean {
    for (const key in Adjustment) {
        if (Object.prototype.hasOwnProperty.call(Adjustment, key)) {
            if (Adjustment[key as keyof typeof Adjustment] === value) {
                return true;
            }
        }
    }
    return false;
}

export function AdjustmentFromJSON(json: any): Adjustment {
    return AdjustmentFromJSONTyped(json, false);
}

export function AdjustmentFromJSONTyped(json: any, ignoreDiscriminator: boolean): Adjustment {
    return json as Adjustment;
}

export function AdjustmentToJSON(value?: Adjustment | null): any {
    return value as any;
}

export function AdjustmentToJSONTyped(value: any, ignoreDiscriminator: boolean): Adjustment {
    return value as Adjustment;
}

