/* tslint:disable */
/* eslint-disable */
/**
 * PxApi
 * This api lets you do 2 things; Find a table(Navigation) and use a table (Table).  _Table below is added to show how tables can be described in yml._  **Table contains status code this API may return** | Status code    | Description      | Reason                      | | -------        | -----------      | ---------------------       | | 200            | Success          | The endpoint has delivered response for the request                      | | 400            | Bad request      | If the request is not valid | | 403            | Forbidden        | number of cells exceed the API limit | | 404            | Not found        | If the URL in request does not exist | | 429            | Too many request | Requests exceed the API time limit. Large queries should be run in sequence | | 50X            | Internal Server Error | The service might be down | 
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { OutputFormatParamType } from './OutputFormatParamType';
import {
    OutputFormatParamTypeFromJSON,
    OutputFormatParamTypeFromJSONTyped,
    OutputFormatParamTypeToJSON,
    OutputFormatParamTypeToJSONTyped,
} from './OutputFormatParamType';
import type { VariablesSelection } from './VariablesSelection';
import {
    VariablesSelectionFromJSON,
    VariablesSelectionFromJSONTyped,
    VariablesSelectionToJSON,
    VariablesSelectionToJSONTyped,
} from './VariablesSelection';
import type { OutputFormatType } from './OutputFormatType';
import {
    OutputFormatTypeFromJSON,
    OutputFormatTypeFromJSONTyped,
    OutputFormatTypeToJSON,
    OutputFormatTypeToJSONTyped,
} from './OutputFormatType';

/**
 * 
 * @export
 * @interface SavedQuery
 */
export interface SavedQuery {
    /**
     * The id of the saved query
     * @type {string}
     * @memberof SavedQuery
     */
    id?: string;
    /**
     * 
     * @type {VariablesSelection}
     * @memberof SavedQuery
     */
    selection: VariablesSelection;
    /**
     * language code for the language used in this response
     * @type {string}
     * @memberof SavedQuery
     */
    language: string;
    /**
     * which table the query is for
     * @type {string}
     * @memberof SavedQuery
     */
    tableId: string;
    /**
     * 
     * @type {OutputFormatType}
     * @memberof SavedQuery
     */
    outputFormat?: OutputFormatType;
    /**
     * 
     * @type {Array<OutputFormatParamType>}
     * @memberof SavedQuery
     */
    outputFormatParams?: Array<OutputFormatParamType>;
}



/**
 * Check if a given object implements the SavedQuery interface.
 */
export function instanceOfSavedQuery(value: object): value is SavedQuery {
    if (!('selection' in value) || value['selection'] === undefined) return false;
    if (!('language' in value) || value['language'] === undefined) return false;
    if (!('tableId' in value) || value['tableId'] === undefined) return false;
    return true;
}

export function SavedQueryFromJSON(json: any): SavedQuery {
    return SavedQueryFromJSONTyped(json, false);
}

export function SavedQueryFromJSONTyped(json: any, ignoreDiscriminator: boolean): SavedQuery {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'] == null ? undefined : json['id'],
        'selection': VariablesSelectionFromJSON(json['selection']),
        'language': json['language'],
        'tableId': json['tableId'],
        'outputFormat': json['outputFormat'] == null ? undefined : OutputFormatTypeFromJSON(json['outputFormat']),
        'outputFormatParams': json['outputFormatParams'] == null ? undefined : ((json['outputFormatParams'] as Array<any>).map(OutputFormatParamTypeFromJSON)),
    };
}

export function SavedQueryToJSON(json: any): SavedQuery {
    return SavedQueryToJSONTyped(json, false);
}

export function SavedQueryToJSONTyped(value?: SavedQuery | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'selection': VariablesSelectionToJSON(value['selection']),
        'language': value['language'],
        'tableId': value['tableId'],
        'outputFormat': OutputFormatTypeToJSON(value['outputFormat']),
        'outputFormatParams': value['outputFormatParams'] == null ? undefined : ((value['outputFormatParams'] as Array<any>).map(OutputFormatParamTypeToJSON)),
    };
}

