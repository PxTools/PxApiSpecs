/* tslint:disable */
/* eslint-disable */
/**
 * PxApi
 * This api lets you do 2 things; Find a table(Navigation) and use a table (Table).  _Table below is added to show how tables can be described in yml._  **Table contains status code this API may return** | Status code    | Description      | Reason                      | | -------        | -----------      | ---------------------       | | 200            | Success          | The endpoint has delivered response for the request                      | | 400            | Bad request      | If the request is not valid | | 403            | Forbidden        | number of cells exceed the API limit | | 404            | Not found        | If the URL in request does not exist | | 429            | Too many request | Requests exceed the API time limit. Large queries should be run in sequence | | 50X            | Internal Server Error | The service might be down | 
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


/**
 * Parameters for the output format.
 * * UseCodes: Can not be combined with UseTexts and UseCodesAndTexts. And only applicable for csv, html and xlsx output format.
 * * UseTexts: Can not be combined with UsedCodes and UseCodesAndTexts. And only applicable for csv, html and xlsx output format.
 * * UseCodesAndTexts: Can not be combined with UseCodess and UseTexts. And only applicable for csv, html and xlsx output format.
 * * IncludeTitle: Only applicable for csv, html and xlsx output format.
 * * SeparatorTab: Can not be combined with SeparatorSpace and SeparatorSemicolon. And only applicable for csv output format.
 * * SeparatorSpace: Can not be combined with SeparatorTab and SeparatorSemicolon. And only applicable for csv output format.
 * * SeparatorSemicolon: Can not be combined with SeparatorTab and SeparatorSpace. And only applicable for csv output format.
 * 
 * @export
 */
export const OutputFormatParamType = {
    UseCodes: 'UseCodes',
    UseTexts: 'UseTexts',
    UseCodesAndTexts: 'UseCodesAndTexts',
    IncludeTitle: 'IncludeTitle',
    SeparatorTab: 'SeparatorTab',
    SeparatorSpace: 'SeparatorSpace',
    SeparatorSemicolon: 'SeparatorSemicolon'
} as const;
export type OutputFormatParamType = typeof OutputFormatParamType[keyof typeof OutputFormatParamType];


export function instanceOfOutputFormatParamType(value: any): boolean {
    for (const key in OutputFormatParamType) {
        if (Object.prototype.hasOwnProperty.call(OutputFormatParamType, key)) {
            if (OutputFormatParamType[key as keyof typeof OutputFormatParamType] === value) {
                return true;
            }
        }
    }
    return false;
}

export function OutputFormatParamTypeFromJSON(json: any): OutputFormatParamType {
    return OutputFormatParamTypeFromJSONTyped(json, false);
}

export function OutputFormatParamTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): OutputFormatParamType {
    return json as OutputFormatParamType;
}

export function OutputFormatParamTypeToJSON(value?: OutputFormatParamType | null): any {
    return value as any;
}

export function OutputFormatParamTypeToJSONTyped(value: any, ignoreDiscriminator: boolean): OutputFormatParamType {
    return value as OutputFormatParamType;
}

