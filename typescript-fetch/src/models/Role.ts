/* tslint:disable */
/* eslint-disable */
/**
 * PxApi
 * This api lets you do 2 things; Find a table(Navigation) and use a table (Table).  _Table below is added to show how tables can be described in yml._  **Table contains status code this API may return** | Status code    | Description      | Reason                      | | -------        | -----------      | ---------------------       | | 200            | Success          | The endpoint has delivered response for the request                      | | 400            | Bad request      | If the request is not valid | | 403            | Forbidden        | number of cells exceed the API limit | | 404            | Not found        | If the URL in request does not exist | | 429            | Too many request | Requests exceed the API time limit. Large queries should be run in sequence | | 50X            | Internal Server Error | The service might be down | 
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * Specification on json-stat.org -> [here](https://json-stat.org/full/#role)
 * @export
 * @interface Role
 */
export interface Role {
    /**
     * 
     * @type {Set<string>}
     * @memberof Role
     */
    time?: Set<string>;
    /**
     * 
     * @type {Set<string>}
     * @memberof Role
     */
    geo?: Set<string>;
    /**
     * 
     * @type {Set<string>}
     * @memberof Role
     */
    metric?: Set<string>;
}

/**
 * Check if a given object implements the Role interface.
 */
export function instanceOfRole(value: object): value is Role {
    return true;
}

export function RoleFromJSON(json: any): Role {
    return RoleFromJSONTyped(json, false);
}

export function RoleFromJSONTyped(json: any, ignoreDiscriminator: boolean): Role {
    if (json == null) {
        return json;
    }
    return {
        
        'time': json['time'] == null ? undefined : new Set(json['time']),
        'geo': json['geo'] == null ? undefined : new Set(json['geo']),
        'metric': json['metric'] == null ? undefined : new Set(json['metric']),
    };
}

export function RoleToJSON(json: any): Role {
    return RoleToJSONTyped(json, false);
}

export function RoleToJSONTyped(value?: Role | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'time': value['time'] == null ? undefined : Array.from(value['time'] as Set<any>),
        'geo': value['geo'] == null ? undefined : Array.from(value['geo'] as Set<any>),
        'metric': value['metric'] == null ? undefined : Array.from(value['metric'] as Set<any>),
    };
}

