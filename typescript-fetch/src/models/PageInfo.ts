/* tslint:disable */
/* eslint-disable */
/**
 * PxApi
 * This api lets you do 2 things; Find a table(Navigation) and use a table (Table).  _Table below is added to show how tables can be described in yml._  **Table contains status code this API may return** | Status code    | Description      | Reason                      | | -------        | -----------      | ---------------------       | | 200            | Success          | The endpoint has delivered response for the request                      | | 400            | Bad request      | If the request is not valid | | 403            | Forbidden        | number of cells exceed the API limit | | 404            | Not found        | If the URL in request does not exist | | 429            | Too many request | Requests exceed the API time limit. Large queries should be run in sequence | | 50X            | Internal Server Error | The service might be down | 
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Link } from './Link';
import {
    LinkFromJSON,
    LinkFromJSONTyped,
    LinkToJSON,
    LinkToJSONTyped,
} from './Link';

/**
 * 
 * @export
 * @interface PageInfo
 */
export interface PageInfo {
    /**
     * The current page number.
     * @type {number}
     * @memberof PageInfo
     */
    pageNumber: number;
    /**
     * The maximal number of elements in a page
     * @type {number}
     * @memberof PageInfo
     */
    pageSize: number;
    /**
     * the Total number of elements
     * @type {number}
     * @memberof PageInfo
     */
    totalElements: number;
    /**
     * The total number of pages
     * @type {number}
     * @memberof PageInfo
     */
    totalPages: number;
    /**
     * 
     * @type {Array<Link>}
     * @memberof PageInfo
     */
    links?: Array<Link>;
}

/**
 * Check if a given object implements the PageInfo interface.
 */
export function instanceOfPageInfo(value: object): value is PageInfo {
    if (!('pageNumber' in value) || value['pageNumber'] === undefined) return false;
    if (!('pageSize' in value) || value['pageSize'] === undefined) return false;
    if (!('totalElements' in value) || value['totalElements'] === undefined) return false;
    if (!('totalPages' in value) || value['totalPages'] === undefined) return false;
    return true;
}

export function PageInfoFromJSON(json: any): PageInfo {
    return PageInfoFromJSONTyped(json, false);
}

export function PageInfoFromJSONTyped(json: any, ignoreDiscriminator: boolean): PageInfo {
    if (json == null) {
        return json;
    }
    return {
        
        'pageNumber': json['pageNumber'],
        'pageSize': json['pageSize'],
        'totalElements': json['totalElements'],
        'totalPages': json['totalPages'],
        'links': json['links'] == null ? undefined : ((json['links'] as Array<any>).map(LinkFromJSON)),
    };
}

export function PageInfoToJSON(json: any): PageInfo {
    return PageInfoToJSONTyped(json, false);
}

export function PageInfoToJSONTyped(value?: PageInfo | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'pageNumber': value['pageNumber'],
        'pageSize': value['pageSize'],
        'totalElements': value['totalElements'],
        'totalPages': value['totalPages'],
        'links': value['links'] == null ? undefined : ((value['links'] as Array<any>).map(LinkToJSON)),
    };
}

